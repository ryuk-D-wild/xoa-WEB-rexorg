{"ast":null,"code":"import { debounce, memo, notUndefined, approxEqual } from \"./utils.js\";\nconst defaultKeyExtractor = index => index;\nconst defaultRangeExtractor = range => {\n  const start = Math.max(range.startIndex - range.overscan, 0);\n  const end = Math.min(range.endIndex + range.overscan, range.count - 1);\n  const arr = [];\n  for (let i = start; i <= end; i++) {\n    arr.push(i);\n  }\n  return arr;\n};\nconst observeElementRect = (instance, cb) => {\n  const element = instance.scrollElement;\n  if (!element) {\n    return;\n  }\n  const targetWindow = instance.targetWindow;\n  if (!targetWindow) {\n    return;\n  }\n  const handler = rect => {\n    const {\n      width,\n      height\n    } = rect;\n    cb({\n      width: Math.round(width),\n      height: Math.round(height)\n    });\n  };\n  handler(element.getBoundingClientRect());\n  if (!targetWindow.ResizeObserver) {\n    return () => {};\n  }\n  const observer = new targetWindow.ResizeObserver(entries => {\n    const entry = entries[0];\n    if (entry == null ? void 0 : entry.borderBoxSize) {\n      const box = entry.borderBoxSize[0];\n      if (box) {\n        handler({\n          width: box.inlineSize,\n          height: box.blockSize\n        });\n        return;\n      }\n    }\n    handler(element.getBoundingClientRect());\n  });\n  observer.observe(element, {\n    box: \"border-box\"\n  });\n  return () => {\n    observer.unobserve(element);\n  };\n};\nconst addEventListenerOptions = {\n  passive: true\n};\nconst observeWindowRect = (instance, cb) => {\n  const element = instance.scrollElement;\n  if (!element) {\n    return;\n  }\n  const handler = () => {\n    cb({\n      width: element.innerWidth,\n      height: element.innerHeight\n    });\n  };\n  handler();\n  element.addEventListener(\"resize\", handler, addEventListenerOptions);\n  return () => {\n    element.removeEventListener(\"resize\", handler);\n  };\n};\nconst supportsScrollend = typeof window == \"undefined\" ? true : \"onscrollend\" in window;\nconst observeElementOffset = (instance, cb) => {\n  const element = instance.scrollElement;\n  if (!element) {\n    return;\n  }\n  const targetWindow = instance.targetWindow;\n  if (!targetWindow) {\n    return;\n  }\n  let offset = 0;\n  const fallback = instance.options.useScrollendEvent && supportsScrollend ? () => void 0 : debounce(targetWindow, () => {\n    cb(offset, false);\n  }, instance.options.isScrollingResetDelay);\n  const createHandler = isScrolling => () => {\n    const {\n      horizontal,\n      isRtl\n    } = instance.options;\n    offset = horizontal ? element[\"scrollLeft\"] * (isRtl && -1 || 1) : element[\"scrollTop\"];\n    fallback();\n    cb(offset, isScrolling);\n  };\n  const handler = createHandler(true);\n  const endHandler = createHandler(false);\n  endHandler();\n  element.addEventListener(\"scroll\", handler, addEventListenerOptions);\n  element.addEventListener(\"scrollend\", endHandler, addEventListenerOptions);\n  return () => {\n    element.removeEventListener(\"scroll\", handler);\n    element.removeEventListener(\"scrollend\", endHandler);\n  };\n};\nconst observeWindowOffset = (instance, cb) => {\n  const element = instance.scrollElement;\n  if (!element) {\n    return;\n  }\n  const targetWindow = instance.targetWindow;\n  if (!targetWindow) {\n    return;\n  }\n  let offset = 0;\n  const fallback = instance.options.useScrollendEvent && supportsScrollend ? () => void 0 : debounce(targetWindow, () => {\n    cb(offset, false);\n  }, instance.options.isScrollingResetDelay);\n  const createHandler = isScrolling => () => {\n    offset = element[instance.options.horizontal ? \"scrollX\" : \"scrollY\"];\n    fallback();\n    cb(offset, isScrolling);\n  };\n  const handler = createHandler(true);\n  const endHandler = createHandler(false);\n  endHandler();\n  element.addEventListener(\"scroll\", handler, addEventListenerOptions);\n  element.addEventListener(\"scrollend\", endHandler, addEventListenerOptions);\n  return () => {\n    element.removeEventListener(\"scroll\", handler);\n    element.removeEventListener(\"scrollend\", endHandler);\n  };\n};\nconst measureElement = (element, entry, instance) => {\n  if (entry == null ? void 0 : entry.borderBoxSize) {\n    const box = entry.borderBoxSize[0];\n    if (box) {\n      const size = Math.round(box[instance.options.horizontal ? \"inlineSize\" : \"blockSize\"]);\n      return size;\n    }\n  }\n  return Math.round(element.getBoundingClientRect()[instance.options.horizontal ? \"width\" : \"height\"]);\n};\nconst windowScroll = (offset, _ref, instance) => {\n  let {\n    adjustments = 0,\n    behavior\n  } = _ref;\n  var _a, _b;\n  const toOffset = offset + adjustments;\n  (_b = (_a = instance.scrollElement) == null ? void 0 : _a.scrollTo) == null ? void 0 : _b.call(_a, {\n    [instance.options.horizontal ? \"left\" : \"top\"]: toOffset,\n    behavior\n  });\n};\nconst elementScroll = (offset, _ref2, instance) => {\n  let {\n    adjustments = 0,\n    behavior\n  } = _ref2;\n  var _a, _b;\n  const toOffset = offset + adjustments;\n  (_b = (_a = instance.scrollElement) == null ? void 0 : _a.scrollTo) == null ? void 0 : _b.call(_a, {\n    [instance.options.horizontal ? \"left\" : \"top\"]: toOffset,\n    behavior\n  });\n};\nclass Virtualizer {\n  constructor(opts) {\n    var _this = this;\n    this.unsubs = [];\n    this.scrollElement = null;\n    this.targetWindow = null;\n    this.isScrolling = false;\n    this.scrollToIndexTimeoutId = null;\n    this.measurementsCache = [];\n    this.itemSizeCache = /* @__PURE__ */new Map();\n    this.pendingMeasuredCacheIndexes = [];\n    this.scrollRect = null;\n    this.scrollOffset = null;\n    this.scrollDirection = null;\n    this.scrollAdjustments = 0;\n    this.elementsCache = /* @__PURE__ */new Map();\n    this.observer = /* @__PURE__ */(() => {\n      let _ro = null;\n      const get = () => {\n        if (_ro) {\n          return _ro;\n        }\n        if (!this.targetWindow || !this.targetWindow.ResizeObserver) {\n          return null;\n        }\n        return _ro = new this.targetWindow.ResizeObserver(entries => {\n          entries.forEach(entry => {\n            this._measureElement(entry.target, entry);\n          });\n        });\n      };\n      return {\n        disconnect: () => {\n          var _a;\n          (_a = get()) == null ? void 0 : _a.disconnect();\n          _ro = null;\n        },\n        observe: target => {\n          var _a;\n          return (_a = get()) == null ? void 0 : _a.observe(target, {\n            box: \"border-box\"\n          });\n        },\n        unobserve: target => {\n          var _a;\n          return (_a = get()) == null ? void 0 : _a.unobserve(target);\n        }\n      };\n    })();\n    this.range = null;\n    this.setOptions = opts2 => {\n      Object.entries(opts2).forEach(_ref3 => {\n        let [key, value] = _ref3;\n        if (typeof value === \"undefined\") delete opts2[key];\n      });\n      this.options = {\n        debug: false,\n        initialOffset: 0,\n        overscan: 1,\n        paddingStart: 0,\n        paddingEnd: 0,\n        scrollPaddingStart: 0,\n        scrollPaddingEnd: 0,\n        horizontal: false,\n        getItemKey: defaultKeyExtractor,\n        rangeExtractor: defaultRangeExtractor,\n        onChange: () => {},\n        measureElement,\n        initialRect: {\n          width: 0,\n          height: 0\n        },\n        scrollMargin: 0,\n        gap: 0,\n        indexAttribute: \"data-index\",\n        initialMeasurementsCache: [],\n        lanes: 1,\n        isScrollingResetDelay: 150,\n        enabled: true,\n        isRtl: false,\n        useScrollendEvent: true,\n        ...opts2\n      };\n    };\n    this.notify = sync => {\n      var _a, _b;\n      (_b = (_a = this.options).onChange) == null ? void 0 : _b.call(_a, this, sync);\n    };\n    this.maybeNotify = memo(() => {\n      this.calculateRange();\n      return [this.isScrolling, this.range ? this.range.startIndex : null, this.range ? this.range.endIndex : null];\n    }, isScrolling => {\n      this.notify(isScrolling);\n    }, {\n      key: process.env.NODE_ENV !== \"production\" && \"maybeNotify\",\n      debug: () => this.options.debug,\n      initialDeps: [this.isScrolling, this.range ? this.range.startIndex : null, this.range ? this.range.endIndex : null]\n    });\n    this.cleanup = () => {\n      this.unsubs.filter(Boolean).forEach(d => d());\n      this.unsubs = [];\n      this.observer.disconnect();\n      this.scrollElement = null;\n      this.targetWindow = null;\n    };\n    this._didMount = () => {\n      return () => {\n        this.cleanup();\n      };\n    };\n    this._willUpdate = () => {\n      var _a;\n      const scrollElement = this.options.enabled ? this.options.getScrollElement() : null;\n      if (this.scrollElement !== scrollElement) {\n        this.cleanup();\n        if (!scrollElement) {\n          this.maybeNotify();\n          return;\n        }\n        this.scrollElement = scrollElement;\n        if (this.scrollElement && \"ownerDocument\" in this.scrollElement) {\n          this.targetWindow = this.scrollElement.ownerDocument.defaultView;\n        } else {\n          this.targetWindow = ((_a = this.scrollElement) == null ? void 0 : _a.window) ?? null;\n        }\n        this.elementsCache.forEach(cached => {\n          this.observer.observe(cached);\n        });\n        this._scrollToOffset(this.getScrollOffset(), {\n          adjustments: void 0,\n          behavior: void 0\n        });\n        this.unsubs.push(this.options.observeElementRect(this, rect => {\n          this.scrollRect = rect;\n          this.maybeNotify();\n        }));\n        this.unsubs.push(this.options.observeElementOffset(this, (offset, isScrolling) => {\n          this.scrollAdjustments = 0;\n          this.scrollDirection = isScrolling ? this.getScrollOffset() < offset ? \"forward\" : \"backward\" : null;\n          this.scrollOffset = offset;\n          this.isScrolling = isScrolling;\n          this.maybeNotify();\n        }));\n      }\n    };\n    this.getSize = () => {\n      if (!this.options.enabled) {\n        this.scrollRect = null;\n        return 0;\n      }\n      this.scrollRect = this.scrollRect ?? this.options.initialRect;\n      return this.scrollRect[this.options.horizontal ? \"width\" : \"height\"];\n    };\n    this.getScrollOffset = () => {\n      if (!this.options.enabled) {\n        this.scrollOffset = null;\n        return 0;\n      }\n      this.scrollOffset = this.scrollOffset ?? (typeof this.options.initialOffset === \"function\" ? this.options.initialOffset() : this.options.initialOffset);\n      return this.scrollOffset;\n    };\n    this.getFurthestMeasurement = (measurements, index) => {\n      const furthestMeasurementsFound = /* @__PURE__ */new Map();\n      const furthestMeasurements = /* @__PURE__ */new Map();\n      for (let m = index - 1; m >= 0; m--) {\n        const measurement = measurements[m];\n        if (furthestMeasurementsFound.has(measurement.lane)) {\n          continue;\n        }\n        const previousFurthestMeasurement = furthestMeasurements.get(measurement.lane);\n        if (previousFurthestMeasurement == null || measurement.end > previousFurthestMeasurement.end) {\n          furthestMeasurements.set(measurement.lane, measurement);\n        } else if (measurement.end < previousFurthestMeasurement.end) {\n          furthestMeasurementsFound.set(measurement.lane, true);\n        }\n        if (furthestMeasurementsFound.size === this.options.lanes) {\n          break;\n        }\n      }\n      return furthestMeasurements.size === this.options.lanes ? Array.from(furthestMeasurements.values()).sort((a, b) => {\n        if (a.end === b.end) {\n          return a.index - b.index;\n        }\n        return a.end - b.end;\n      })[0] : void 0;\n    };\n    this.getMeasurementOptions = memo(() => [this.options.count, this.options.paddingStart, this.options.scrollMargin, this.options.getItemKey, this.options.enabled], (count, paddingStart, scrollMargin, getItemKey, enabled) => {\n      this.pendingMeasuredCacheIndexes = [];\n      return {\n        count,\n        paddingStart,\n        scrollMargin,\n        getItemKey,\n        enabled\n      };\n    }, {\n      key: false\n    });\n    this.getMeasurements = memo(() => [this.getMeasurementOptions(), this.itemSizeCache], (_ref4, itemSizeCache) => {\n      let {\n        count,\n        paddingStart,\n        scrollMargin,\n        getItemKey,\n        enabled\n      } = _ref4;\n      if (!enabled) {\n        this.measurementsCache = [];\n        this.itemSizeCache.clear();\n        return [];\n      }\n      if (this.measurementsCache.length === 0) {\n        this.measurementsCache = this.options.initialMeasurementsCache;\n        this.measurementsCache.forEach(item => {\n          this.itemSizeCache.set(item.key, item.size);\n        });\n      }\n      const min = this.pendingMeasuredCacheIndexes.length > 0 ? Math.min(...this.pendingMeasuredCacheIndexes) : 0;\n      this.pendingMeasuredCacheIndexes = [];\n      const measurements = this.measurementsCache.slice(0, min);\n      for (let i = min; i < count; i++) {\n        const key = getItemKey(i);\n        const furthestMeasurement = this.options.lanes === 1 ? measurements[i - 1] : this.getFurthestMeasurement(measurements, i);\n        const start = furthestMeasurement ? furthestMeasurement.end + this.options.gap : paddingStart + scrollMargin;\n        const measuredSize = itemSizeCache.get(key);\n        const size = typeof measuredSize === \"number\" ? measuredSize : this.options.estimateSize(i);\n        const end = start + size;\n        const lane = furthestMeasurement ? furthestMeasurement.lane : i % this.options.lanes;\n        measurements[i] = {\n          index: i,\n          start,\n          size,\n          end,\n          key,\n          lane\n        };\n      }\n      this.measurementsCache = measurements;\n      return measurements;\n    }, {\n      key: process.env.NODE_ENV !== \"production\" && \"getMeasurements\",\n      debug: () => this.options.debug\n    });\n    this.calculateRange = memo(() => [this.getMeasurements(), this.getSize(), this.getScrollOffset()], (measurements, outerSize, scrollOffset) => {\n      return this.range = measurements.length > 0 && outerSize > 0 ? calculateRange({\n        measurements,\n        outerSize,\n        scrollOffset\n      }) : null;\n    }, {\n      key: process.env.NODE_ENV !== \"production\" && \"calculateRange\",\n      debug: () => this.options.debug\n    });\n    this.getIndexes = memo(() => [this.options.rangeExtractor, this.calculateRange(), this.options.overscan, this.options.count], (rangeExtractor, range, overscan, count) => {\n      return range === null ? [] : rangeExtractor({\n        startIndex: range.startIndex,\n        endIndex: range.endIndex,\n        overscan,\n        count\n      });\n    }, {\n      key: process.env.NODE_ENV !== \"production\" && \"getIndexes\",\n      debug: () => this.options.debug\n    });\n    this.indexFromElement = node => {\n      const attributeName = this.options.indexAttribute;\n      const indexStr = node.getAttribute(attributeName);\n      if (!indexStr) {\n        console.warn(`Missing attribute name '${attributeName}={index}' on measured element.`);\n        return -1;\n      }\n      return parseInt(indexStr, 10);\n    };\n    this._measureElement = (node, entry) => {\n      const index = this.indexFromElement(node);\n      const item = this.measurementsCache[index];\n      if (!item) {\n        return;\n      }\n      const key = item.key;\n      const prevNode = this.elementsCache.get(key);\n      if (prevNode !== node) {\n        if (prevNode) {\n          this.observer.unobserve(prevNode);\n        }\n        this.observer.observe(node);\n        this.elementsCache.set(key, node);\n      }\n      if (node.isConnected) {\n        this.resizeItem(index, this.options.measureElement(node, entry, this));\n      }\n    };\n    this.resizeItem = (index, size) => {\n      const item = this.measurementsCache[index];\n      if (!item) {\n        return;\n      }\n      const itemSize = this.itemSizeCache.get(item.key) ?? item.size;\n      const delta = size - itemSize;\n      if (delta !== 0) {\n        if (this.shouldAdjustScrollPositionOnItemSizeChange !== void 0 ? this.shouldAdjustScrollPositionOnItemSizeChange(item, delta, this) : item.start < this.getScrollOffset() + this.scrollAdjustments) {\n          if (process.env.NODE_ENV !== \"production\" && this.options.debug) {\n            console.info(\"correction\", delta);\n          }\n          this._scrollToOffset(this.getScrollOffset(), {\n            adjustments: this.scrollAdjustments += delta,\n            behavior: void 0\n          });\n        }\n        this.pendingMeasuredCacheIndexes.push(item.index);\n        this.itemSizeCache = new Map(this.itemSizeCache.set(item.key, size));\n        this.notify(false);\n      }\n    };\n    this.measureElement = node => {\n      if (!node) {\n        this.elementsCache.forEach((cached, key) => {\n          if (!cached.isConnected) {\n            this.observer.unobserve(cached);\n            this.elementsCache.delete(key);\n          }\n        });\n        return;\n      }\n      this._measureElement(node, void 0);\n    };\n    this.getVirtualItems = memo(() => [this.getIndexes(), this.getMeasurements()], (indexes, measurements) => {\n      const virtualItems = [];\n      for (let k = 0, len = indexes.length; k < len; k++) {\n        const i = indexes[k];\n        const measurement = measurements[i];\n        virtualItems.push(measurement);\n      }\n      return virtualItems;\n    }, {\n      key: process.env.NODE_ENV !== \"production\" && \"getVirtualItems\",\n      debug: () => this.options.debug\n    });\n    this.getVirtualItemForOffset = offset => {\n      const measurements = this.getMeasurements();\n      if (measurements.length === 0) {\n        return void 0;\n      }\n      return notUndefined(measurements[findNearestBinarySearch(0, measurements.length - 1, index => notUndefined(measurements[index]).start, offset)]);\n    };\n    this.getOffsetForAlignment = (toOffset, align) => {\n      const size = this.getSize();\n      const scrollOffset = this.getScrollOffset();\n      if (align === \"auto\") {\n        if (toOffset >= scrollOffset + size) {\n          align = \"end\";\n        }\n      }\n      if (align === \"end\") {\n        toOffset -= size;\n      }\n      const scrollSizeProp = this.options.horizontal ? \"scrollWidth\" : \"scrollHeight\";\n      const scrollSize = this.scrollElement ? \"document\" in this.scrollElement ? this.scrollElement.document.documentElement[scrollSizeProp] : this.scrollElement[scrollSizeProp] : 0;\n      const maxOffset = scrollSize - size;\n      return Math.max(Math.min(maxOffset, toOffset), 0);\n    };\n    this.getOffsetForIndex = function (index) {\n      let align = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : \"auto\";\n      index = Math.max(0, Math.min(index, _this.options.count - 1));\n      const item = _this.measurementsCache[index];\n      if (!item) {\n        return void 0;\n      }\n      const size = _this.getSize();\n      const scrollOffset = _this.getScrollOffset();\n      if (align === \"auto\") {\n        if (item.end >= scrollOffset + size - _this.options.scrollPaddingEnd) {\n          align = \"end\";\n        } else if (item.start <= scrollOffset + _this.options.scrollPaddingStart) {\n          align = \"start\";\n        } else {\n          return [scrollOffset, align];\n        }\n      }\n      const centerOffset = item.start - _this.options.scrollPaddingStart + (item.size - size) / 2;\n      switch (align) {\n        case \"center\":\n          return [_this.getOffsetForAlignment(centerOffset, align), align];\n        case \"end\":\n          return [_this.getOffsetForAlignment(item.end + _this.options.scrollPaddingEnd, align), align];\n        default:\n          return [_this.getOffsetForAlignment(item.start - _this.options.scrollPaddingStart, align), align];\n      }\n    };\n    this.isDynamicMode = () => this.elementsCache.size > 0;\n    this.cancelScrollToIndex = () => {\n      if (this.scrollToIndexTimeoutId !== null && this.targetWindow) {\n        this.targetWindow.clearTimeout(this.scrollToIndexTimeoutId);\n        this.scrollToIndexTimeoutId = null;\n      }\n    };\n    this.scrollToOffset = function (toOffset) {\n      let {\n        align = \"start\",\n        behavior\n      } = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n      _this.cancelScrollToIndex();\n      if (behavior === \"smooth\" && _this.isDynamicMode()) {\n        console.warn(\"The `smooth` scroll behavior is not fully supported with dynamic size.\");\n      }\n      _this._scrollToOffset(_this.getOffsetForAlignment(toOffset, align), {\n        adjustments: void 0,\n        behavior\n      });\n    };\n    this.scrollToIndex = function (index) {\n      let {\n        align: initialAlign = \"auto\",\n        behavior\n      } = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n      index = Math.max(0, Math.min(index, _this.options.count - 1));\n      _this.cancelScrollToIndex();\n      if (behavior === \"smooth\" && _this.isDynamicMode()) {\n        console.warn(\"The `smooth` scroll behavior is not fully supported with dynamic size.\");\n      }\n      const offsetAndAlign = _this.getOffsetForIndex(index, initialAlign);\n      if (!offsetAndAlign) return;\n      const [offset, align] = offsetAndAlign;\n      _this._scrollToOffset(offset, {\n        adjustments: void 0,\n        behavior\n      });\n      if (behavior !== \"smooth\" && _this.isDynamicMode() && _this.targetWindow) {\n        _this.scrollToIndexTimeoutId = _this.targetWindow.setTimeout(() => {\n          _this.scrollToIndexTimeoutId = null;\n          const elementInDOM = _this.elementsCache.has(_this.options.getItemKey(index));\n          if (elementInDOM) {\n            const [latestOffset] = notUndefined(_this.getOffsetForIndex(index, align));\n            if (!approxEqual(latestOffset, _this.getScrollOffset())) {\n              _this.scrollToIndex(index, {\n                align,\n                behavior\n              });\n            }\n          } else {\n            _this.scrollToIndex(index, {\n              align,\n              behavior\n            });\n          }\n        });\n      }\n    };\n    this.scrollBy = function (delta) {\n      let {\n        behavior\n      } = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n      _this.cancelScrollToIndex();\n      if (behavior === \"smooth\" && _this.isDynamicMode()) {\n        console.warn(\"The `smooth` scroll behavior is not fully supported with dynamic size.\");\n      }\n      _this._scrollToOffset(_this.getScrollOffset() + delta, {\n        adjustments: void 0,\n        behavior\n      });\n    };\n    this.getTotalSize = () => {\n      var _a;\n      const measurements = this.getMeasurements();\n      let end;\n      if (measurements.length === 0) {\n        end = this.options.paddingStart;\n      } else {\n        end = this.options.lanes === 1 ? ((_a = measurements[measurements.length - 1]) == null ? void 0 : _a.end) ?? 0 : Math.max(...measurements.slice(-this.options.lanes).map(m => m.end));\n      }\n      return Math.max(end - this.options.scrollMargin + this.options.paddingEnd, 0);\n    };\n    this._scrollToOffset = (offset, _ref5) => {\n      let {\n        adjustments,\n        behavior\n      } = _ref5;\n      this.options.scrollToFn(offset, {\n        behavior,\n        adjustments\n      }, this);\n    };\n    this.measure = () => {\n      this.itemSizeCache = /* @__PURE__ */new Map();\n      this.notify(false);\n    };\n    this.setOptions(opts);\n  }\n}\nconst findNearestBinarySearch = (low, high, getCurrentValue, value) => {\n  while (low <= high) {\n    const middle = (low + high) / 2 | 0;\n    const currentValue = getCurrentValue(middle);\n    if (currentValue < value) {\n      low = middle + 1;\n    } else if (currentValue > value) {\n      high = middle - 1;\n    } else {\n      return middle;\n    }\n  }\n  if (low > 0) {\n    return low - 1;\n  } else {\n    return 0;\n  }\n};\nfunction calculateRange(_ref6) {\n  let {\n    measurements,\n    outerSize,\n    scrollOffset\n  } = _ref6;\n  const count = measurements.length - 1;\n  const getOffset = index => measurements[index].start;\n  const startIndex = findNearestBinarySearch(0, count, getOffset, scrollOffset);\n  let endIndex = startIndex;\n  while (endIndex < count && measurements[endIndex].end < scrollOffset + outerSize) {\n    endIndex++;\n  }\n  return {\n    startIndex,\n    endIndex\n  };\n}\nexport { Virtualizer, approxEqual, debounce, defaultKeyExtractor, defaultRangeExtractor, elementScroll, measureElement, memo, notUndefined, observeElementOffset, observeElementRect, observeWindowOffset, observeWindowRect, windowScroll };","map":{"version":3,"mappings":";AA8Ca,4BAAuBA,SAAkBA;AAEzC,8BAAyBC,SAAiB;EACrD,MAAMC,QAAQC,KAAKC,IAAIH,MAAMI,aAAaJ,MAAMK,UAAU,CAAC;EACrD,YAAMH,KAAKI,IAAIN,MAAMO,WAAWP,MAAMK,UAAUL,MAAMQ,QAAQ,CAAC;EAErE,MAAMC,MAAM,EAAC;EAEb,SAASC,IAAIT,OAAOS,KAAKC,KAAKD,KAAK;IACjCD,IAAIG,KAAKF,CAAC;EAAA;EAGL;AACT;AAEa,2BAAqB,CAChCG,UACAC,OACG;EACH,MAAMC,UAAUF,SAASG;EACzB,IAAI,CAACD,SAAS;IACZ;EAAA;EAEF,MAAME,eAAeJ,SAASI;EAC9B,IAAI,CAACA,cAAc;IACjB;EAAA;EAGI,gBAAWC,QAAe;IACxB;MAAEC;MAAOC;IAAA,IAAWF;IACvBJ;MAAEK,OAAOjB,KAAKmB,MAAMF,KAAK;MAAGC,QAAQlB,KAAKmB,MAAMD,MAAM;IAAA,CAAG;EAC7D;EAEQE,gBAAQC,uBAAuB;EAEnC,KAACN,aAAaO,gBAAgB;IAChC,OAAO,MAAM,CAAC;EAAA;EAGhB,MAAMC,WAAW,IAAIR,aAAaO,eAAgBE,WAAY;IACtD,cAAQA,QAAQ,CAAC;IACvB,IAAIC,+BAAOC,eAAe;MAClB,YAAMD,MAAMC,cAAc,CAAC;MACjC,IAAIC,KAAK;QACPP,QAAQ;UAAEH,OAAOU,IAAIC;UAAYV,QAAQS,IAAIE;QAAA,CAAW;QACxD;MAAA;IACF;IAEMT,gBAAQC,uBAAuB;EAAA,CACxC;EAEDE,SAASO,QAAQjB,SAAS;IAAEc,KAAK;EAAA,CAAc;EAE/C,OAAO,MAAM;IACXJ,SAASQ,UAAUlB,OAAO;EAC5B;AACF;AAEA,MAAMmB,0BAA0B;EAC9BC,SAAS;AACX;AAEa,0BAAoB,CAC/BtB,UACAC,OACG;EACH,MAAMC,UAAUF,SAASG;EACzB,IAAI,CAACD,SAAS;IACZ;EAAA;EAGF,MAAMO,UAAU,MAAM;IACpBR,GAAG;MAAEK,OAAOJ,QAAQqB;MAAYhB,QAAQL,QAAQsB;IAAA,CAAa;EAC/D;EACQf;EAEAP,yBAAiB,UAAUO,SAASY,uBAAuB;EAEnE,OAAO,MAAM;IACHnB,4BAAoB,UAAUO,OAAO;EAC/C;AACF;AAEA,MAAMgB,oBACJ,OAAOC,UAAU,cAAc,OAAO,iBAAiBA;AAI5C,6BAAuB,CAClC1B,UACAC,OACG;EACH,MAAMC,UAAUF,SAASG;EACzB,IAAI,CAACD,SAAS;IACZ;EAAA;EAEF,MAAME,eAAeJ,SAASI;EAC9B,IAAI,CAACA,cAAc;IACjB;EAAA;EAGF,IAAIuB,SAAS;EACb,MAAMC,WACJ5B,SAAS6B,QAAQC,qBAAqBL,oBAClC,MAAM,SACNM,SACE3B,cACA,MAAM;IACJH,GAAG0B,QAAQ,KAAK;EAClB,GACA3B,SAAS6B,QAAQG,sBACnB;EAEA,sBAAiBC,eAAyB,MAAM;IACpD,MAAM;MAAEC;MAAYC;IAAM,IAAInC,SAAS6B;IAC9BF,sBACLzB,QAAQ,YAAY,KAAMiC,SAAS,MAAO,KAC1CjC,QAAQ,WAAW;IACd0B;IACT3B,GAAG0B,QAAQM,WAAW;EACxB;EACM,gBAAUG,cAAc,IAAI;EAC5B,mBAAaA,cAAc,KAAK;EAC3BC;EAEHnC,yBAAiB,UAAUO,SAASY,uBAAuB;EAC3DnB,yBAAiB,aAAamC,YAAYhB,uBAAuB;EAEzE,OAAO,MAAM;IACHnB,4BAAoB,UAAUO,OAAO;IACrCP,4BAAoB,aAAamC,UAAU;EACrD;AACF;AAEa,4BAAsB,CACjCrC,UACAC,OACG;EACH,MAAMC,UAAUF,SAASG;EACzB,IAAI,CAACD,SAAS;IACZ;EAAA;EAEF,MAAME,eAAeJ,SAASI;EAC9B,IAAI,CAACA,cAAc;IACjB;EAAA;EAGF,IAAIuB,SAAS;EACb,MAAMC,WACJ5B,SAAS6B,QAAQC,qBAAqBL,oBAClC,MAAM,SACNM,SACE3B,cACA,MAAM;IACJH,GAAG0B,QAAQ,KAAK;EAClB,GACA3B,SAAS6B,QAAQG,sBACnB;EAEA,sBAAiBC,eAAyB,MAAM;IACpDN,SAASzB,QAAQF,SAAS6B,QAAQK,aAAa,YAAY,SAAS;IAC3DN;IACT3B,GAAG0B,QAAQM,WAAW;EACxB;EACM,gBAAUG,cAAc,IAAI;EAC5B,mBAAaA,cAAc,KAAK;EAC3BC;EAEHnC,yBAAiB,UAAUO,SAASY,uBAAuB;EAC3DnB,yBAAiB,aAAamC,YAAYhB,uBAAuB;EAEzE,OAAO,MAAM;IACHnB,4BAAoB,UAAUO,OAAO;IACrCP,4BAAoB,aAAamC,UAAU;EACrD;AACF;AAEO,MAAMC,iBAAiB,CAC5BpC,SACAY,OACAd,aACG;EACH,IAAIc,+BAAOC,eAAe;IAClB,YAAMD,MAAMC,cAAc,CAAC;IACjC,IAAIC,KAAK;MACP,MAAMuB,OAAOlD,KAAKmB,MAChBQ,IAAIhB,SAAS6B,QAAQK,aAAa,eAAe,WAAW,EAC9D;MACO;IAAA;EACT;EAEF,OAAO7C,KAAKmB,MACVN,QAAQQ,uBAAsB,CAC5BV,SAAS6B,QAAQK,aAAa,UAAU,QAC1C,EACF;AACF;AAEa,qBAAe,CAC1BP,cAKA3B,aACG;EAAA,IALH;IACEwC,cAAc;IACdC;EACF;;EAGA,MAAMC,WAAWf,SAASa;EAE1B,qBAASrC,kBAAT,mBAAwBwC,aAAxB,4BAAmC;IACjC,CAAC3C,SAAS6B,QAAQK,aAAa,SAAS,KAAK,GAAGQ;IAChDD;EAAA;AAEJ;AAEa,sBAAgB,CAC3Bd,eAKA3B,aACG;EAAA,IALH;IACEwC,cAAc;IACdC;EACF;;EAGA,MAAMC,WAAWf,SAASa;EAE1B,qBAASrC,kBAAT,mBAAwBwC,aAAxB,4BAAmC;IACjC,CAAC3C,SAAS6B,QAAQK,aAAa,SAAS,KAAK,GAAGQ;IAChDD;EAAA;AAEJ;AAyDO,MAAMG,YAGX;EAqDAC,YAAYC,MAAwD;IAAA;IApDpE,KAAQC,SAAqC,EAAC;IAEP;IACa;IACtC;IACd,KAAQC,yBAAwC;IAChD,yBAAwC,EAAC;IACjC,wCAAoBC,KAAiB;IAC7C,KAAQC,8BAA6C,EAAC;IAC5B;IACI;IACY;IAC1C,KAAQC,oBAAoB;IAQ5B,wCAAoBF,KAAuB;IAC3C,KAAQrC,WAAkB;MACxB,IAAIwC,MAA6B;MAEjC,MAAMC,MAAM,MAAM;QAChB,IAAID,KAAK;UACA;QAAA;QAGT,IAAI,CAAC,KAAKhD,gBAAgB,CAAC,KAAKA,aAAaO,gBAAgB;UACpD;QAAA;QAGT,OAAQyC,MAAM,IAAI,KAAKhD,aAAaO,eAAgBE,WAAY;UACtDA,gBAASC,SAAU;YACpB,qBAAgBA,MAAMwC,QAAwBxC,KAAK;UAAA,CACzD;QAAA,CACF;MACH;MAEO;QACLyC,YAAY,MAAM;;UAChB,mCAAOA;UACDH;QACR;QACAjC,SAAUmC;;UACR,kBAAI,KAAJ,mBAAOnC,QAAQmC,QAAQ;YAAEtC,KAAK;UAAA;;QAChCI,WAAYkC;;UAAoB,kBAAI,KAAJ,mBAAOlC,UAAUkC;QAAA;MACnD;IAAA,IACC;IACsD;IAMzD,kBAAcR,SAA2D;MAChEU,eAAQV,KAAI,EAAEW,QAAQ,SAAkB;QAAA,IAAjB,CAACC,KAAKC,KAAK;QACvC,IAAI,OAAOA,UAAU,aAAa,OAAQb,MAAaY,GAAG;MAAA,CAC3D;MAED,KAAK7B,UAAU;QACb+B,OAAO;QACPC,eAAe;QACfrE,UAAU;QACVsE,cAAc;QACdC,YAAY;QACZC,oBAAoB;QACpBC,kBAAkB;QAClB/B,YAAY;QACZgC,YAAYC;QACZC,gBAAgBC;QAChBC,UAAU,MAAM,CAAC;QACjBhC;QACAiC,aAAa;UAAEjE,OAAO;UAAGC,QAAQ;QAAE;QACnCiE,cAAc;QACdC,KAAK;QACLC,gBAAgB;QAChBC,0BAA0B,EAAC;QAC3BC,OAAO;QACP5C,uBAAuB;QACvB6C,SAAS;QACT1C,OAAO;QACPL,mBAAmB;QACnB,GAAGgB;MACL;IACF;IAEQ,cAAUgC,QAAkB;;MAC7B,0BAAQR,aAAR,4BAAmB,MAAMQ;IAChC;IAEA,KAAQC,cAAcC,KACpB,MAAM;MACJ,KAAKC,gBAAe;MAEb,QACL,KAAKhD,aACL,KAAK9C,QAAQ,KAAKA,MAAMI,aAAa,MACrC,KAAKJ,QAAQ,KAAKA,MAAMO,WAAW,KACrC;IACF,GACCuC,eAAgB;MACf,KAAKiD,OAAOjD,WAAW;IACzB,GACA;MACEyB,KAAKyB,QAAQC,IAAIC,aAAa,gBAAgB;MAC9CzB,OAAO,MAAM,KAAK/B,QAAQ+B;MAC1B0B,aAAa,CACX,KAAKrD,aACL,KAAK9C,QAAQ,KAAKA,MAAMI,aAAa,MACrC,KAAKJ,QAAQ,KAAKA,MAAMO,WAAW;IACrC,EAEJ;IAEA,KAAQ6F,UAAU,MAAM;MACjB,YAAOC,OAAOC,OAAO,EAAEhC,QAASiC,KAAMA,GAAI;MAC/C,KAAK3C,SAAS,EAAC;MACf,KAAKnC,SAAS2C,YAAW;MACzB,KAAKpD,gBAAgB;MACrB,KAAKC,eAAe;IACtB;IAEA,iBAAY,MAAM;MAChB,OAAO,MAAM;QACX,KAAKmF,SAAQ;MACf;IACF;IAEA,mBAAc,MAAM;;MAClB,MAAMpF,gBAAgB,KAAK0B,QAAQgD,UAC/B,KAAKhD,QAAQ8D,qBACb;MAEA,SAAKxF,kBAAkBA,eAAe;QACxC,KAAKoF,SAAQ;QAEb,IAAI,CAACpF,eAAe;UAClB,KAAK4E,aAAY;UACjB;QAAA;QAGF,KAAK5E,gBAAgBA;QAErB,IAAI,KAAKA,iBAAiB,mBAAmB,KAAKA,eAAe;UAC1D,oBAAe,KAAKA,cAAcyF,cAAcC;QAAA,OAChD;UACA,sBAAeC,UAAK3F,kBAAL,mBAAoBuB,WAAU;QAAA;QAG/C,mBAAc+B,QAASsC,UAAW;UAChC,cAAS5E,QAAQ4E,MAAM;QAAA,CAC7B;QAEI,qBAAgB,KAAKC,mBAAmB;UAC3CxD,aAAa;UACbC,UAAU;QAAA,CACX;QAED,KAAKM,OAAOhD,KACV,KAAK8B,QAAQoE,mBAAmB,MAAO5F,QAAS;UAC9C,KAAK6F,aAAa7F;UAClB,KAAK0E,aAAY;QAClB,GACH;QAEA,KAAKhC,OAAOhD,KACV,KAAK8B,QAAQsE,qBAAqB,MAAM,CAACxE,QAAQM,gBAAgB;UAC/D,KAAKkB,oBAAoB;UACzB,KAAKiD,kBAAkBnE,cACnB,KAAK+D,oBAAoBrE,SACvB,YACA,aACF;UACJ,KAAK0E,eAAe1E;UACpB,KAAKM,cAAcA;UAEnB,KAAK8C,aAAY;QAClB,GACH;MAAA;IAEJ;IAEA,KAAQuB,UAAU,MAAM;MAClB,KAAC,KAAKzE,QAAQgD,SAAS;QACzB,KAAKqB,aAAa;QACX;MAAA;MAGT,KAAKA,aAAa,KAAKA,cAAc,KAAKrE,QAAQ0C;MAElD,OAAO,KAAK2B,WAAW,KAAKrE,QAAQK,aAAa,UAAU,QAAQ;IACrE;IAEA,KAAQ8D,kBAAkB,MAAM;MAC1B,KAAC,KAAKnE,QAAQgD,SAAS;QACzB,KAAKwB,eAAe;QACb;MAAA;MAGT,KAAKA,eACH,KAAKA,iBACJ,OAAO,KAAKxE,QAAQgC,kBAAkB,aACnC,KAAKhC,QAAQgC,eAAc,GAC3B,KAAKhC,QAAQgC;MAEnB,OAAO,KAAKwC;IACd;IAEQ,8BAAyB,CAC/BE,cACArH,UACG;MACG,qDAAgC+D,KAAkB;MAClD,gDAA2BA,KAAyB;MAC1D,SAASuD,IAAItH,QAAQ,GAAGsH,KAAK,GAAGA,KAAK;QAC7B,oBAAcD,aAAaC,CAAC;QAElC,IAAIC,0BAA0BC,IAAIC,YAAYC,IAAI,GAAG;UACnD;QAAA;QAGF,MAAMC,8BAA8BC,qBAAqBzD,IACvDsD,YAAYC,KACd;QACA,IACEC,+BAA+B,QAC/BF,YAAY7G,MAAM+G,4BAA4B/G,KAC9C;UACqBgH,yBAAIH,YAAYC,MAAMD,WAAW;QAC7C,uBAAY7G,MAAM+G,4BAA4B/G,KAAK;UAClC2G,8BAAIE,YAAYC,MAAM,IAAI;QAAA;QAGtD,IAAIH,0BAA0BlE,SAAS,KAAKV,QAAQ+C,OAAO;UACzD;QAAA;MACF;MAGF,OAAOkC,qBAAqBvE,SAAS,KAAKV,QAAQ+C,QAC9CmC,MAAMC,KAAKF,qBAAqBG,QAAQ,EAAEC,KAAK,CAACC,GAAGC,MAAM;QACnD,MAAEtH,QAAQsH,EAAEtH,KAAK;UACZ,SAAEZ,QAAQkI,EAAElI;QAAA;QAGd,SAAEY,MAAMsH,EAAEtH;MAAA,CAClB,EAAE,CAAC,IACJ;IACN;IAEA,KAAQuH,wBAAwBrC,KAC9B,MAAM,CACJ,KAAKnD,QAAQlC,OACb,KAAKkC,QAAQiC,cACb,KAAKjC,QAAQ2C,cACb,KAAK3C,QAAQqC,YACb,KAAKrC,QAAQgD,QACf,EACA,CAAClF,OAAOmE,cAAcU,cAAcN,YAAYW,YAAY;MAC1D,KAAK3B,8BAA8B,EAAC;MAC7B;QACLvD;QACAmE;QACAU;QACAN;QACAW;MACF;IACF,GACA;MACEnB,KAAK;IAAA,EAET;IAEA,KAAQ4D,kBAAkBtC,KACxB,MAAM,CAAC,KAAKqC,yBAAyB,KAAKE,aAAa,GACvD,QAEEA,kBACG;MAAA,IAFH;QAAE5H;QAAOmE;QAAcU;QAAcN;QAAYW;MAAA;MAGjD,IAAI,CAACA,SAAS;QACZ,KAAK2C,oBAAoB,EAAC;QAC1B,KAAKD,cAAcE,OAAM;QACzB,OAAO,EAAC;MAAA;MAGN,SAAKD,kBAAkBE,WAAW,GAAG;QAClC,yBAAoB,KAAK7F,QAAQ8C;QACjC,uBAAkBlB,QAASkE,QAAS;UACvC,KAAKJ,cAAcK,IAAID,KAAKjE,KAAKiE,KAAKpF,IAAI;QAAA,CAC3C;MAAA;MAGG,YACJ,KAAKW,4BAA4BwE,SAAS,IACtCrI,KAAKI,IAAI,GAAG,KAAKyD,2BAA2B,IAC5C;MACN,KAAKA,8BAA8B,EAAC;MAEpC,MAAMqD,eAAe,KAAKiB,kBAAkBK,MAAM,GAAGpI,GAAG;MAExD,SAASI,IAAIJ,KAAKI,IAAIF,OAAOE,KAAK;QAC1B,YAAMqE,WAAWrE,CAAC;QAExB,MAAMiI,sBACJ,KAAKjG,QAAQ+C,UAAU,IACnB2B,aAAa1G,IAAI,CAAC,IAClB,KAAKkI,uBAAuBxB,cAAc1G,CAAC;QAEjD,MAAMT,QAAQ0I,sBACVA,oBAAoBhI,MAAM,KAAK+B,QAAQ4C,MACvCX,eAAeU;QAEb,qBAAe+C,cAAclE,IAAIK,GAAG;QACpC,aACJ,OAAOsE,iBAAiB,WACpBA,eACA,KAAKnG,QAAQoG,aAAapI,CAAC;QAEjC,MAAMC,MAAMV,QAAQmD;QAEpB,MAAMqE,OAAOkB,sBACTA,oBAAoBlB,OACpB/G,IAAI,KAAKgC,QAAQ+C;QAErB2B,aAAa1G,CAAC,IAAI;UAChBX,OAAOW;UACPT;UACAmD;UACAzC;UACA4D;UACAkD;QACF;MAAA;MAGF,KAAKY,oBAAoBjB;MAElB;IACT,GACA;MACE7C,KAAKyB,QAAQC,IAAIC,aAAa,gBAAgB;MAC9CzB,OAAO,MAAM,KAAK/B,QAAQ+B;IAAA,EAE9B;IAEiB,2BACf,MAAM,CAAC,KAAK0D,mBAAmB,KAAKhB,WAAW,KAAKN,iBAAiB,GACrE,CAACO,cAAc2B,WAAW7B,iBAAiB;MACzC,OAAQ,KAAKlH,QACXoH,aAAamB,SAAS,KAAKQ,YAAY,IACnCjD,eAAe;QACbsB;QACA2B;QACA7B;MACD,KACD;IACR,GACA;MACE3C,KAAKyB,QAAQC,IAAIC,aAAa,gBAAgB;MAC9CzB,OAAO,MAAM,KAAK/B,QAAQ+B;IAAA,EAE9B;IAEA,KAAQuE,aAAanD,KACnB,MAAM,CACJ,KAAKnD,QAAQuC,gBACb,KAAKa,gBAAe,EACpB,KAAKpD,QAAQrC,UACb,KAAKqC,QAAQlC,MACf,EACA,CAACyE,gBAAgBjF,OAAOK,UAAUG,UAAU;MAC1C,OAAOR,UAAU,OACb,EAAC,GACDiF,eAAe;QACb7E,YAAYJ,MAAMI;QAClBG,UAAUP,MAAMO;QAChBF;QACAG;MAAA,CACD;IACP,GACA;MACE+D,KAAKyB,QAAQC,IAAIC,aAAa,gBAAgB;MAC9CzB,OAAO,MAAM,KAAK/B,QAAQ+B;IAAA,EAE9B;IAEA,wBAAoBwE,QAAuB;MACnC,sBAAgB,KAAKvG,QAAQ6C;MAC7B,iBAAW0D,KAAKC,aAAaC,aAAa;MAEhD,IAAI,CAACC,UAAU;QACLC,aACN,2BAA2BF,aAAa,iCAC1C;QACO;MAAA;MAGF,gBAASC,UAAU,EAAE;IAC9B;IAEQ,uBAAkB,CACxBH,MACAtH,UACG;MACG,cAAQ,KAAK2H,iBAAiBL,IAAI;MAClC,aAAO,KAAKZ,kBAAkBtI,KAAK;MACzC,IAAI,CAACyI,MAAM;QACT;MAAA;MAEF,MAAMjE,MAAMiE,KAAKjE;MACjB,MAAMgF,WAAW,KAAKC,cAActF,IAAIK,GAAG;MAE3C,IAAIgF,aAAaN,MAAM;QACrB,IAAIM,UAAU;UACP,cAAStH,UAAUsH,QAAQ;QAAA;QAE7B,cAASvH,QAAQiH,IAAI;QACrB,mBAAcR,IAAIlE,KAAK0E,IAAI;MAAA;MAGlC,IAAIA,KAAKQ,aAAa;QACf,gBAAW1J,OAAO,KAAK2C,QAAQS,eAAe8F,MAAMtH,OAAO,IAAI,CAAC;MAAA;IAEzE;IAEa,mBAAC5B,OAAeqD,SAAiB;MACtC,aAAO,KAAKiF,kBAAkBtI,KAAK;MACzC,IAAI,CAACyI,MAAM;QACT;MAAA;MAEF,MAAMkB,WAAW,KAAKtB,cAAclE,IAAIsE,KAAKjE,GAAG,KAAKiE,KAAKpF;MAC1D,MAAMuG,QAAQvG,OAAOsG;MAErB,IAAIC,UAAU,GAAG;QACf,IACE,KAAKC,+CAA+C,SAChD,KAAKA,2CAA2CpB,MAAMmB,OAAO,IAAI,IACjEnB,KAAKvI,QAAQ,KAAK4G,iBAAgB,GAAI,KAAK7C,mBAC/C;UACA,IAAIgC,QAAQC,IAAIC,aAAa,gBAAgB,KAAKxD,QAAQ+B,OAAO;YACvD4E,aAAK,cAAcM,KAAK;UAAA;UAG7B,qBAAgB,KAAK9C,mBAAmB;YAC3CxD,aAAc,KAAKW,qBAAqB2F;YACxCrG,UAAU;UAAA,CACX;QAAA;QAGE,iCAA4B1C,KAAK4H,KAAKzI,KAAK;QAC3C,qBAAgB,IAAI+D,IAAI,KAAKsE,cAAcK,IAAID,KAAKjE,KAAKnB,IAAI,CAAC;QAEnE,KAAK2C,OAAO,KAAK;MAAA;IAErB;IAEA,sBAAkBkD,QAA0C;MAC1D,IAAI,CAACA,MAAM;QACT,KAAKO,cAAclF,QAAQ,CAACsC,QAAQrC,QAAQ;UACtC,KAACqC,OAAO6C,aAAa;YAClB,cAASxH,UAAU2E,MAAM;YACzB,mBAAciD,OAAOtF,GAAG;UAAA;QAC/B,CACD;QACD;MAAA;MAGG,qBAAgB0E,MAAM,MAAS;IACtC;IAEkB,4BAChB,MAAM,CAAC,KAAKD,YAAc,OAAKb,iBAAiB,GAChD,CAAC2B,SAAS1C,iBAAiB;MACzB,MAAM2C,eAAmC,EAAC;MAE1C,SAASC,IAAI,GAAGC,MAAMH,QAAQvB,QAAQyB,IAAIC,KAAKD,KAAK;QAC5C,UAAIF,QAAQE,CAAC;QACb,oBAAc5C,aAAa1G,CAAC;QAElCqJ,aAAanJ,KAAK4G,WAAW;MAAA;MAGxB;IACT,GACA;MACEjD,KAAKyB,QAAQC,IAAIC,aAAa,gBAAgB;MAC9CzB,OAAO,MAAM,KAAK/B,QAAQ+B;IAAA,EAE9B;IAEA,+BAA2BjC,UAAmB;MACtC,qBAAe,KAAK2F,iBAAgB;MACtC,iBAAaI,WAAW,GAAG;QACtB;MAAA;MAEF,oBACLnB,aACE8C,wBACE,GACA9C,aAAamB,SAAS,GACrBxI,SAAkBoK,aAAa/C,aAAarH,KAAK,CAAC,EAAEE,OACrDuC,OAEJ,EACF;IACF;IAEwB,8BAACe,UAAkB6G,UAA2B;MAC9D,aAAO,KAAKjD,SAAQ;MACpB,qBAAe,KAAKN,iBAAgB;MAE1C,IAAIuD,UAAU,QAAQ;QAChB,gBAAYlD,eAAe9D,MAAM;UAC3BgH;QAAA;MACV;MAGF,IAAIA,UAAU,OAAO;QACP7G;MAAA;MAGd,MAAM8G,iBAAiB,KAAK3H,QAAQK,aAChC,gBACA;MACJ,MAAMuH,aAAa,KAAKtJ,gBACpB,cAAc,KAAKA,gBACjB,KAAKA,cAAcuJ,SAASC,gBAAgBH,cAAc,IAC1D,KAAKrJ,cAAcqJ,cAAc,IACnC;MAEJ,MAAMI,YAAYH,aAAalH;MAE/B,OAAOlD,KAAKC,IAAID,KAAKI,IAAImK,WAAWlH,QAAQ,GAAG,CAAC;IAClD;IAEoB,mCAACxD,OAAmD;MAAA,IAApCqK,4EAAyB;MACnDrK,aAAKI,IAAI,GAAGD,KAAKI,IAAIP,OAAO,MAAK2C,QAAQlC,QAAQ,CAAC,CAAC;MAErD,aAAO,MAAK6H,kBAAkBtI,KAAK;MACzC,IAAI,CAACyI,MAAM;QACF;MAAA;MAGH,aAAO,MAAKrB,SAAQ;MACpB,qBAAe,MAAKN,iBAAgB;MAE1C,IAAIuD,UAAU,QAAQ;QACpB,IAAI5B,KAAK7H,OAAOuG,eAAe9D,OAAO,MAAKV,QAAQoC,kBAAkB;UAC3DsF;QAAA,WACC5B,KAAKvI,SAASiH,eAAe,MAAKxE,QAAQmC,oBAAoB;UAC/DuF;QAAA,OACH;UACE,QAAClD,cAAckD,KAAK;QAAA;MAC7B;MAGI,qBACJ5B,KAAKvI,QAAQ,MAAKyC,QAAQmC,sBAAsB2D,KAAKpF,OAAOA,QAAQ;MAEtE,QAAQgH;QACN,KAAK;UACH,OAAO,CAAC,MAAKM,sBAAsBC,cAAcP,KAAK,GAAGA,KAAK;QAChE,KAAK;UACI,QACL,MAAKM,sBACHlC,KAAK7H,MAAM,MAAK+B,QAAQoC,kBACxBsF,MACF,EACAA,MACF;QACF;UACS,QACL,MAAKM,sBACHlC,KAAKvI,QAAQ,MAAKyC,QAAQmC,oBAC1BuF,MACF,EACAA,MACF;MAAA;IAEN;IAEA,KAAQQ,gBAAgB,MAAM,KAAKpB,cAAcpG,OAAO;IAExD,KAAQyH,sBAAsB,MAAM;MAClC,IAAI,KAAKhH,2BAA2B,QAAQ,KAAK5C,cAAc;QACxD,kBAAa6J,aAAa,KAAKjH,sBAAsB;QAC1D,KAAKA,yBAAyB;MAAA;IAElC;IAEiB,gCACfN,UAEG;MAAA,IADH;QAAE6G,QAAQ;QAAS9G;MAAS,wEAA2B;MAEvD,MAAKuH,qBAAoB;MAEzB,IAAIvH,aAAa,YAAY,MAAKsH,iBAAiB;QACzCvB,aACN,yEACF;MAAA;MAGF,MAAK0B,gBAAgB,MAAKL,sBAAsBnH,UAAU6G,KAAK,GAAG;QAChE/G,aAAa;QACbC;MAAA,CACD;IACH;IAEgB,+BACdvD,OAEG;MAAA,IADH;QAAEqK,OAAOY,eAAe;QAAQ1H;MAAmC;MAE3DvD,aAAKI,IAAI,GAAGD,KAAKI,IAAIP,OAAO,MAAK2C,QAAQlC,QAAQ,CAAC,CAAC;MAE3D,MAAKqK,qBAAoB;MAEzB,IAAIvH,aAAa,YAAY,MAAKsH,iBAAiB;QACzCvB,aACN,yEACF;MAAA;MAGF,MAAM4B,iBAAiB,MAAKC,kBAAkBnL,OAAOiL,YAAY;MACjE,IAAI,CAACC,gBAAgB;MAEf,OAACzI,QAAQ4H,KAAK,IAAIa;MAExB,MAAKF,gBAAgBvI,QAAQ;QAAEa,aAAa;QAAWC;MAAA,CAAU;MAEjE,IAAIA,aAAa,YAAY,MAAKsH,eAAc,IAAK,MAAK3J,cAAc;QACtE,MAAK4C,yBAAyB,MAAK5C,aAAakK,WAAW,MAAM;UAC/D,MAAKtH,yBAAyB;UAExB,qBAAe,MAAK2F,cAAcjC,IACtC,MAAK7E,QAAQqC,WAAWhF,KAAK,EAC/B;UAEA,IAAIqL,cAAc;YACV,OAACC,YAAY,IAAIlB,aACrB,MAAKe,kBAAkBnL,OAAOqK,KAAK,EACrC;YAEA,IAAI,CAACkB,YAAYD,cAAc,MAAKxE,iBAAiB,GAAG;cACtD,MAAK0E,cAAcxL,OAAO;gBAAEqK;gBAAO9G;cAAA,CAAU;YAAA;UAC/C,OACK;YACL,MAAKiI,cAAcxL,OAAO;cAAEqK;cAAO9G;YAAA,CAAU;UAAA;QAC/C,CACD;MAAA;IAEL;IAEA,gBAAW,UAACqG,OAA4D;MAAA,IAA7C;QAAErG;MAAS,wEAA2B;MAC/D,MAAKuH,qBAAoB;MAEzB,IAAIvH,aAAa,YAAY,MAAKsH,iBAAiB;QACzCvB,aACN,yEACF;MAAA;MAGF,MAAK0B,gBAAgB,MAAKlE,iBAAgB,GAAI8C,OAAO;QACnDtG,aAAa;QACbC;MAAA,CACD;IACH;IAEA,oBAAe,MAAM;;MACb,qBAAe,KAAK6E,iBAAgB;MAEtC;MAEA,iBAAaI,WAAW,GAAG;QAC7B5H,MAAM,KAAK+B,QAAQiC;MAAA,OACd;QAGHhE,WAAK+B,QAAQ+C,UAAU,MAClBkB,kBAAaS,aAAamB,SAAS,CAAC,MAApC,mBAAuC5H,QAAO,IAC/CT,KAAKC,IACH,GAAGiH,aAAasB,MAAM,CAAC,KAAKhG,QAAQ+C,KAAK,EAAE+F,IAAKnE,KAAMA,EAAE1G,GAAG,EAC7D;MAAA;MAGR,OAAOT,KAAKC,IACVQ,MAAM,KAAK+B,QAAQ2C,eAAe,KAAK3C,QAAQkC,YAC/C,EACF;IACF;IAEQ,uBAAkB,CACxBpC,kBAQG;MAAA,IAPH;QACEa;QACAC;MAAA;MAMF,KAAKZ,QAAQ+I,WAAWjJ,QAAQ;QAAEc;QAAUD;MAAA,GAAe,IAAI;IACjE;IAEA,eAAU,MAAM;MACT,wCAAoBS,KAAI;MAC7B,KAAKiC,OAAO,KAAK;IACnB;IA7oBE,KAAK2F,WAAW/H,IAAI;EAAA;AA8oBxB;AAEA,MAAMuG,0BAA0B,CAC9ByB,KACAC,MACAC,iBACArH,UACG;EACH,OAAOmH,OAAOC,MAAM;IACZ,gBAAWD,MAAMC,QAAQ,IAAK;IAC9B,qBAAeC,gBAAgBC,MAAM;IAE3C,IAAIC,eAAevH,OAAO;MACxBmH,MAAMG,SAAS;IAAA,WACNC,eAAevH,OAAO;MAC/BoH,OAAOE,SAAS;IAAA,OACX;MACE;IAAA;EACT;EAGF,IAAIH,MAAM,GAAG;IACX,OAAOA,MAAM;EAAA,OACR;IACE;EAAA;AAEX;AAEA,SAAS7F,sBAQN;EAAA,IARqB;IACtBsB;IACA2B;IACA7B;EACF;EAKQ,cAAQE,aAAamB,SAAS;EACpC,MAAMyD,YAAajM,SAAkBqH,aAAarH,KAAK,EAAGE;EAE1D,MAAMG,aAAa8J,wBAAwB,GAAG1J,OAAOwL,WAAW9E,YAAY;EAC5E,IAAI3G,WAAWH;EAEf,OACEG,WAAWC,SACX4G,aAAa7G,QAAQ,EAAGI,MAAMuG,eAAe6B,WAC7C;IACAxI;EAAA;EAGK;IAAEH;IAAYG;EAAS;AAChC","names":["index","range","start","Math","max","startIndex","overscan","min","endIndex","count","arr","i","end","push","instance","cb","element","scrollElement","targetWindow","rect","width","height","round","handler","getBoundingClientRect","ResizeObserver","observer","entries","entry","borderBoxSize","box","inlineSize","blockSize","observe","unobserve","addEventListenerOptions","passive","innerWidth","innerHeight","supportsScrollend","window","offset","fallback","options","useScrollendEvent","debounce","isScrollingResetDelay","isScrolling","horizontal","isRtl","createHandler","endHandler","measureElement","size","adjustments","behavior","toOffset","scrollTo","Virtualizer","constructor","opts","unsubs","scrollToIndexTimeoutId","Map","pendingMeasuredCacheIndexes","scrollAdjustments","_ro","get","target","disconnect","Object","forEach","key","value","debug","initialOffset","paddingStart","paddingEnd","scrollPaddingStart","scrollPaddingEnd","getItemKey","defaultKeyExtractor","rangeExtractor","defaultRangeExtractor","onChange","initialRect","scrollMargin","gap","indexAttribute","initialMeasurementsCache","lanes","enabled","sync","maybeNotify","memo","calculateRange","notify","process","env","NODE_ENV","initialDeps","cleanup","filter","Boolean","d","getScrollElement","ownerDocument","defaultView","_a","cached","getScrollOffset","observeElementRect","scrollRect","observeElementOffset","scrollDirection","scrollOffset","getSize","measurements","m","furthestMeasurementsFound","has","measurement","lane","previousFurthestMeasurement","furthestMeasurements","Array","from","values","sort","a","b","getMeasurementOptions","getMeasurements","itemSizeCache","measurementsCache","clear","length","item","set","slice","furthestMeasurement","getFurthestMeasurement","measuredSize","estimateSize","outerSize","getIndexes","node","getAttribute","attributeName","indexStr","console","indexFromElement","prevNode","elementsCache","isConnected","itemSize","delta","shouldAdjustScrollPositionOnItemSizeChange","delete","indexes","virtualItems","k","len","findNearestBinarySearch","notUndefined","align","scrollSizeProp","scrollSize","document","documentElement","maxOffset","getOffsetForAlignment","centerOffset","isDynamicMode","cancelScrollToIndex","clearTimeout","_scrollToOffset","initialAlign","offsetAndAlign","getOffsetForIndex","setTimeout","elementInDOM","latestOffset","approxEqual","scrollToIndex","map","scrollToFn","setOptions","low","high","getCurrentValue","middle","currentValue","getOffset"],"sources":["C:\\Users\\aiwar\\Desktop\\cloth\\myy-app\\node_modules\\@tanstack\\virtual-core\\src\\index.ts"],"sourcesContent":["import { approxEqual, debounce, memo, notUndefined } from './utils'\n\nexport * from './utils'\n\n//\n\ntype ScrollDirection = 'forward' | 'backward'\n\ntype ScrollAlignment = 'start' | 'center' | 'end' | 'auto'\n\ntype ScrollBehavior = 'auto' | 'smooth'\n\nexport interface ScrollToOptions {\n  align?: ScrollAlignment\n  behavior?: ScrollBehavior\n}\n\ntype ScrollToOffsetOptions = ScrollToOptions\n\ntype ScrollToIndexOptions = ScrollToOptions\n\nexport interface Range {\n  startIndex: number\n  endIndex: number\n  overscan: number\n  count: number\n}\n\ntype Key = number | string | bigint\n\nexport interface VirtualItem {\n  key: Key\n  index: number\n  start: number\n  end: number\n  size: number\n  lane: number\n}\n\nexport interface Rect {\n  width: number\n  height: number\n}\n\n//\n\nexport const defaultKeyExtractor = (index: number) => index\n\nexport const defaultRangeExtractor = (range: Range) => {\n  const start = Math.max(range.startIndex - range.overscan, 0)\n  const end = Math.min(range.endIndex + range.overscan, range.count - 1)\n\n  const arr = []\n\n  for (let i = start; i <= end; i++) {\n    arr.push(i)\n  }\n\n  return arr\n}\n\nexport const observeElementRect = <T extends Element>(\n  instance: Virtualizer<T, any>,\n  cb: (rect: Rect) => void,\n) => {\n  const element = instance.scrollElement\n  if (!element) {\n    return\n  }\n  const targetWindow = instance.targetWindow\n  if (!targetWindow) {\n    return\n  }\n\n  const handler = (rect: Rect) => {\n    const { width, height } = rect\n    cb({ width: Math.round(width), height: Math.round(height) })\n  }\n\n  handler(element.getBoundingClientRect())\n\n  if (!targetWindow.ResizeObserver) {\n    return () => {}\n  }\n\n  const observer = new targetWindow.ResizeObserver((entries) => {\n    const entry = entries[0]\n    if (entry?.borderBoxSize) {\n      const box = entry.borderBoxSize[0]\n      if (box) {\n        handler({ width: box.inlineSize, height: box.blockSize })\n        return\n      }\n    }\n    handler(element.getBoundingClientRect())\n  })\n\n  observer.observe(element, { box: 'border-box' })\n\n  return () => {\n    observer.unobserve(element)\n  }\n}\n\nconst addEventListenerOptions = {\n  passive: true,\n}\n\nexport const observeWindowRect = (\n  instance: Virtualizer<Window, any>,\n  cb: (rect: Rect) => void,\n) => {\n  const element = instance.scrollElement\n  if (!element) {\n    return\n  }\n\n  const handler = () => {\n    cb({ width: element.innerWidth, height: element.innerHeight })\n  }\n  handler()\n\n  element.addEventListener('resize', handler, addEventListenerOptions)\n\n  return () => {\n    element.removeEventListener('resize', handler)\n  }\n}\n\nconst supportsScrollend =\n  typeof window == 'undefined' ? true : 'onscrollend' in window\n\ntype ObserveOffsetCallBack = (offset: number, isScrolling: boolean) => void\n\nexport const observeElementOffset = <T extends Element>(\n  instance: Virtualizer<T, any>,\n  cb: ObserveOffsetCallBack,\n) => {\n  const element = instance.scrollElement\n  if (!element) {\n    return\n  }\n  const targetWindow = instance.targetWindow\n  if (!targetWindow) {\n    return\n  }\n\n  let offset = 0\n  const fallback =\n    instance.options.useScrollendEvent && supportsScrollend\n      ? () => undefined\n      : debounce(\n          targetWindow,\n          () => {\n            cb(offset, false)\n          },\n          instance.options.isScrollingResetDelay,\n        )\n\n  const createHandler = (isScrolling: boolean) => () => {\n    const { horizontal, isRtl } = instance.options\n    offset = horizontal\n      ? element['scrollLeft'] * ((isRtl && -1) || 1)\n      : element['scrollTop']\n    fallback()\n    cb(offset, isScrolling)\n  }\n  const handler = createHandler(true)\n  const endHandler = createHandler(false)\n  endHandler()\n\n  element.addEventListener('scroll', handler, addEventListenerOptions)\n  element.addEventListener('scrollend', endHandler, addEventListenerOptions)\n\n  return () => {\n    element.removeEventListener('scroll', handler)\n    element.removeEventListener('scrollend', endHandler)\n  }\n}\n\nexport const observeWindowOffset = (\n  instance: Virtualizer<Window, any>,\n  cb: ObserveOffsetCallBack,\n) => {\n  const element = instance.scrollElement\n  if (!element) {\n    return\n  }\n  const targetWindow = instance.targetWindow\n  if (!targetWindow) {\n    return\n  }\n\n  let offset = 0\n  const fallback =\n    instance.options.useScrollendEvent && supportsScrollend\n      ? () => undefined\n      : debounce(\n          targetWindow,\n          () => {\n            cb(offset, false)\n          },\n          instance.options.isScrollingResetDelay,\n        )\n\n  const createHandler = (isScrolling: boolean) => () => {\n    offset = element[instance.options.horizontal ? 'scrollX' : 'scrollY']\n    fallback()\n    cb(offset, isScrolling)\n  }\n  const handler = createHandler(true)\n  const endHandler = createHandler(false)\n  endHandler()\n\n  element.addEventListener('scroll', handler, addEventListenerOptions)\n  element.addEventListener('scrollend', endHandler, addEventListenerOptions)\n\n  return () => {\n    element.removeEventListener('scroll', handler)\n    element.removeEventListener('scrollend', endHandler)\n  }\n}\n\nexport const measureElement = <TItemElement extends Element>(\n  element: TItemElement,\n  entry: ResizeObserverEntry | undefined,\n  instance: Virtualizer<any, TItemElement>,\n) => {\n  if (entry?.borderBoxSize) {\n    const box = entry.borderBoxSize[0]\n    if (box) {\n      const size = Math.round(\n        box[instance.options.horizontal ? 'inlineSize' : 'blockSize'],\n      )\n      return size\n    }\n  }\n  return Math.round(\n    element.getBoundingClientRect()[\n      instance.options.horizontal ? 'width' : 'height'\n    ],\n  )\n}\n\nexport const windowScroll = <T extends Window>(\n  offset: number,\n  {\n    adjustments = 0,\n    behavior,\n  }: { adjustments?: number; behavior?: ScrollBehavior },\n  instance: Virtualizer<T, any>,\n) => {\n  const toOffset = offset + adjustments\n\n  instance.scrollElement?.scrollTo?.({\n    [instance.options.horizontal ? 'left' : 'top']: toOffset,\n    behavior,\n  })\n}\n\nexport const elementScroll = <T extends Element>(\n  offset: number,\n  {\n    adjustments = 0,\n    behavior,\n  }: { adjustments?: number; behavior?: ScrollBehavior },\n  instance: Virtualizer<T, any>,\n) => {\n  const toOffset = offset + adjustments\n\n  instance.scrollElement?.scrollTo?.({\n    [instance.options.horizontal ? 'left' : 'top']: toOffset,\n    behavior,\n  })\n}\n\nexport interface VirtualizerOptions<\n  TScrollElement extends Element | Window,\n  TItemElement extends Element,\n> {\n  // Required from the user\n  count: number\n  getScrollElement: () => TScrollElement | null\n  estimateSize: (index: number) => number\n\n  // Required from the framework adapter (but can be overridden)\n  scrollToFn: (\n    offset: number,\n    options: { adjustments?: number; behavior?: ScrollBehavior },\n    instance: Virtualizer<TScrollElement, TItemElement>,\n  ) => void\n  observeElementRect: (\n    instance: Virtualizer<TScrollElement, TItemElement>,\n    cb: (rect: Rect) => void,\n  ) => void | (() => void)\n  observeElementOffset: (\n    instance: Virtualizer<TScrollElement, TItemElement>,\n    cb: ObserveOffsetCallBack,\n  ) => void | (() => void)\n  // Optional\n  debug?: boolean\n  initialRect?: Rect\n  onChange?: (\n    instance: Virtualizer<TScrollElement, TItemElement>,\n    sync: boolean,\n  ) => void\n  measureElement?: (\n    element: TItemElement,\n    entry: ResizeObserverEntry | undefined,\n    instance: Virtualizer<TScrollElement, TItemElement>,\n  ) => number\n  overscan?: number\n  horizontal?: boolean\n  paddingStart?: number\n  paddingEnd?: number\n  scrollPaddingStart?: number\n  scrollPaddingEnd?: number\n  initialOffset?: number | (() => number)\n  getItemKey?: (index: number) => Key\n  rangeExtractor?: (range: Range) => Array<number>\n  scrollMargin?: number\n  gap?: number\n  indexAttribute?: string\n  initialMeasurementsCache?: Array<VirtualItem>\n  lanes?: number\n  isScrollingResetDelay?: number\n  useScrollendEvent?: boolean\n  enabled?: boolean\n  isRtl?: boolean\n}\n\nexport class Virtualizer<\n  TScrollElement extends Element | Window,\n  TItemElement extends Element,\n> {\n  private unsubs: Array<void | (() => void)> = []\n  options!: Required<VirtualizerOptions<TScrollElement, TItemElement>>\n  scrollElement: TScrollElement | null = null\n  targetWindow: (Window & typeof globalThis) | null = null\n  isScrolling = false\n  private scrollToIndexTimeoutId: number | null = null\n  measurementsCache: Array<VirtualItem> = []\n  private itemSizeCache = new Map<Key, number>()\n  private pendingMeasuredCacheIndexes: Array<number> = []\n  scrollRect: Rect | null = null\n  scrollOffset: number | null = null\n  scrollDirection: ScrollDirection | null = null\n  private scrollAdjustments = 0\n  shouldAdjustScrollPositionOnItemSizeChange:\n    | undefined\n    | ((\n        item: VirtualItem,\n        delta: number,\n        instance: Virtualizer<TScrollElement, TItemElement>,\n      ) => boolean)\n  elementsCache = new Map<Key, TItemElement>()\n  private observer = (() => {\n    let _ro: ResizeObserver | null = null\n\n    const get = () => {\n      if (_ro) {\n        return _ro\n      }\n\n      if (!this.targetWindow || !this.targetWindow.ResizeObserver) {\n        return null\n      }\n\n      return (_ro = new this.targetWindow.ResizeObserver((entries) => {\n        entries.forEach((entry) => {\n          this._measureElement(entry.target as TItemElement, entry)\n        })\n      }))\n    }\n\n    return {\n      disconnect: () => {\n        get()?.disconnect()\n        _ro = null\n      },\n      observe: (target: Element) =>\n        get()?.observe(target, { box: 'border-box' }),\n      unobserve: (target: Element) => get()?.unobserve(target),\n    }\n  })()\n  range: { startIndex: number; endIndex: number } | null = null\n\n  constructor(opts: VirtualizerOptions<TScrollElement, TItemElement>) {\n    this.setOptions(opts)\n  }\n\n  setOptions = (opts: VirtualizerOptions<TScrollElement, TItemElement>) => {\n    Object.entries(opts).forEach(([key, value]) => {\n      if (typeof value === 'undefined') delete (opts as any)[key]\n    })\n\n    this.options = {\n      debug: false,\n      initialOffset: 0,\n      overscan: 1,\n      paddingStart: 0,\n      paddingEnd: 0,\n      scrollPaddingStart: 0,\n      scrollPaddingEnd: 0,\n      horizontal: false,\n      getItemKey: defaultKeyExtractor,\n      rangeExtractor: defaultRangeExtractor,\n      onChange: () => {},\n      measureElement,\n      initialRect: { width: 0, height: 0 },\n      scrollMargin: 0,\n      gap: 0,\n      indexAttribute: 'data-index',\n      initialMeasurementsCache: [],\n      lanes: 1,\n      isScrollingResetDelay: 150,\n      enabled: true,\n      isRtl: false,\n      useScrollendEvent: true,\n      ...opts,\n    }\n  }\n\n  private notify = (sync: boolean) => {\n    this.options.onChange?.(this, sync)\n  }\n\n  private maybeNotify = memo(\n    () => {\n      this.calculateRange()\n\n      return [\n        this.isScrolling,\n        this.range ? this.range.startIndex : null,\n        this.range ? this.range.endIndex : null,\n      ]\n    },\n    (isScrolling) => {\n      this.notify(isScrolling)\n    },\n    {\n      key: process.env.NODE_ENV !== 'production' && 'maybeNotify',\n      debug: () => this.options.debug,\n      initialDeps: [\n        this.isScrolling,\n        this.range ? this.range.startIndex : null,\n        this.range ? this.range.endIndex : null,\n      ] as [boolean, number | null, number | null],\n    },\n  )\n\n  private cleanup = () => {\n    this.unsubs.filter(Boolean).forEach((d) => d!())\n    this.unsubs = []\n    this.observer.disconnect()\n    this.scrollElement = null\n    this.targetWindow = null\n  }\n\n  _didMount = () => {\n    return () => {\n      this.cleanup()\n    }\n  }\n\n  _willUpdate = () => {\n    const scrollElement = this.options.enabled\n      ? this.options.getScrollElement()\n      : null\n\n    if (this.scrollElement !== scrollElement) {\n      this.cleanup()\n\n      if (!scrollElement) {\n        this.maybeNotify()\n        return\n      }\n\n      this.scrollElement = scrollElement\n\n      if (this.scrollElement && 'ownerDocument' in this.scrollElement) {\n        this.targetWindow = this.scrollElement.ownerDocument.defaultView\n      } else {\n        this.targetWindow = this.scrollElement?.window ?? null\n      }\n\n      this.elementsCache.forEach((cached) => {\n        this.observer.observe(cached)\n      })\n\n      this._scrollToOffset(this.getScrollOffset(), {\n        adjustments: undefined,\n        behavior: undefined,\n      })\n\n      this.unsubs.push(\n        this.options.observeElementRect(this, (rect) => {\n          this.scrollRect = rect\n          this.maybeNotify()\n        }),\n      )\n\n      this.unsubs.push(\n        this.options.observeElementOffset(this, (offset, isScrolling) => {\n          this.scrollAdjustments = 0\n          this.scrollDirection = isScrolling\n            ? this.getScrollOffset() < offset\n              ? 'forward'\n              : 'backward'\n            : null\n          this.scrollOffset = offset\n          this.isScrolling = isScrolling\n\n          this.maybeNotify()\n        }),\n      )\n    }\n  }\n\n  private getSize = () => {\n    if (!this.options.enabled) {\n      this.scrollRect = null\n      return 0\n    }\n\n    this.scrollRect = this.scrollRect ?? this.options.initialRect\n\n    return this.scrollRect[this.options.horizontal ? 'width' : 'height']\n  }\n\n  private getScrollOffset = () => {\n    if (!this.options.enabled) {\n      this.scrollOffset = null\n      return 0\n    }\n\n    this.scrollOffset =\n      this.scrollOffset ??\n      (typeof this.options.initialOffset === 'function'\n        ? this.options.initialOffset()\n        : this.options.initialOffset)\n\n    return this.scrollOffset\n  }\n\n  private getFurthestMeasurement = (\n    measurements: Array<VirtualItem>,\n    index: number,\n  ) => {\n    const furthestMeasurementsFound = new Map<number, true>()\n    const furthestMeasurements = new Map<number, VirtualItem>()\n    for (let m = index - 1; m >= 0; m--) {\n      const measurement = measurements[m]!\n\n      if (furthestMeasurementsFound.has(measurement.lane)) {\n        continue\n      }\n\n      const previousFurthestMeasurement = furthestMeasurements.get(\n        measurement.lane,\n      )\n      if (\n        previousFurthestMeasurement == null ||\n        measurement.end > previousFurthestMeasurement.end\n      ) {\n        furthestMeasurements.set(measurement.lane, measurement)\n      } else if (measurement.end < previousFurthestMeasurement.end) {\n        furthestMeasurementsFound.set(measurement.lane, true)\n      }\n\n      if (furthestMeasurementsFound.size === this.options.lanes) {\n        break\n      }\n    }\n\n    return furthestMeasurements.size === this.options.lanes\n      ? Array.from(furthestMeasurements.values()).sort((a, b) => {\n          if (a.end === b.end) {\n            return a.index - b.index\n          }\n\n          return a.end - b.end\n        })[0]\n      : undefined\n  }\n\n  private getMeasurementOptions = memo(\n    () => [\n      this.options.count,\n      this.options.paddingStart,\n      this.options.scrollMargin,\n      this.options.getItemKey,\n      this.options.enabled,\n    ],\n    (count, paddingStart, scrollMargin, getItemKey, enabled) => {\n      this.pendingMeasuredCacheIndexes = []\n      return {\n        count,\n        paddingStart,\n        scrollMargin,\n        getItemKey,\n        enabled,\n      }\n    },\n    {\n      key: false,\n    },\n  )\n\n  private getMeasurements = memo(\n    () => [this.getMeasurementOptions(), this.itemSizeCache],\n    (\n      { count, paddingStart, scrollMargin, getItemKey, enabled },\n      itemSizeCache,\n    ) => {\n      if (!enabled) {\n        this.measurementsCache = []\n        this.itemSizeCache.clear()\n        return []\n      }\n\n      if (this.measurementsCache.length === 0) {\n        this.measurementsCache = this.options.initialMeasurementsCache\n        this.measurementsCache.forEach((item) => {\n          this.itemSizeCache.set(item.key, item.size)\n        })\n      }\n\n      const min =\n        this.pendingMeasuredCacheIndexes.length > 0\n          ? Math.min(...this.pendingMeasuredCacheIndexes)\n          : 0\n      this.pendingMeasuredCacheIndexes = []\n\n      const measurements = this.measurementsCache.slice(0, min)\n\n      for (let i = min; i < count; i++) {\n        const key = getItemKey(i)\n\n        const furthestMeasurement =\n          this.options.lanes === 1\n            ? measurements[i - 1]\n            : this.getFurthestMeasurement(measurements, i)\n\n        const start = furthestMeasurement\n          ? furthestMeasurement.end + this.options.gap\n          : paddingStart + scrollMargin\n\n        const measuredSize = itemSizeCache.get(key)\n        const size =\n          typeof measuredSize === 'number'\n            ? measuredSize\n            : this.options.estimateSize(i)\n\n        const end = start + size\n\n        const lane = furthestMeasurement\n          ? furthestMeasurement.lane\n          : i % this.options.lanes\n\n        measurements[i] = {\n          index: i,\n          start,\n          size,\n          end,\n          key,\n          lane,\n        }\n      }\n\n      this.measurementsCache = measurements\n\n      return measurements\n    },\n    {\n      key: process.env.NODE_ENV !== 'production' && 'getMeasurements',\n      debug: () => this.options.debug,\n    },\n  )\n\n  calculateRange = memo(\n    () => [this.getMeasurements(), this.getSize(), this.getScrollOffset()],\n    (measurements, outerSize, scrollOffset) => {\n      return (this.range =\n        measurements.length > 0 && outerSize > 0\n          ? calculateRange({\n              measurements,\n              outerSize,\n              scrollOffset,\n            })\n          : null)\n    },\n    {\n      key: process.env.NODE_ENV !== 'production' && 'calculateRange',\n      debug: () => this.options.debug,\n    },\n  )\n\n  private getIndexes = memo(\n    () => [\n      this.options.rangeExtractor,\n      this.calculateRange(),\n      this.options.overscan,\n      this.options.count,\n    ],\n    (rangeExtractor, range, overscan, count) => {\n      return range === null\n        ? []\n        : rangeExtractor({\n            startIndex: range.startIndex,\n            endIndex: range.endIndex,\n            overscan,\n            count,\n          })\n    },\n    {\n      key: process.env.NODE_ENV !== 'production' && 'getIndexes',\n      debug: () => this.options.debug,\n    },\n  )\n\n  indexFromElement = (node: TItemElement) => {\n    const attributeName = this.options.indexAttribute\n    const indexStr = node.getAttribute(attributeName)\n\n    if (!indexStr) {\n      console.warn(\n        `Missing attribute name '${attributeName}={index}' on measured element.`,\n      )\n      return -1\n    }\n\n    return parseInt(indexStr, 10)\n  }\n\n  private _measureElement = (\n    node: TItemElement,\n    entry: ResizeObserverEntry | undefined,\n  ) => {\n    const index = this.indexFromElement(node)\n    const item = this.measurementsCache[index]\n    if (!item) {\n      return\n    }\n    const key = item.key\n    const prevNode = this.elementsCache.get(key)\n\n    if (prevNode !== node) {\n      if (prevNode) {\n        this.observer.unobserve(prevNode)\n      }\n      this.observer.observe(node)\n      this.elementsCache.set(key, node)\n    }\n\n    if (node.isConnected) {\n      this.resizeItem(index, this.options.measureElement(node, entry, this))\n    }\n  }\n\n  resizeItem = (index: number, size: number) => {\n    const item = this.measurementsCache[index]\n    if (!item) {\n      return\n    }\n    const itemSize = this.itemSizeCache.get(item.key) ?? item.size\n    const delta = size - itemSize\n\n    if (delta !== 0) {\n      if (\n        this.shouldAdjustScrollPositionOnItemSizeChange !== undefined\n          ? this.shouldAdjustScrollPositionOnItemSizeChange(item, delta, this)\n          : item.start < this.getScrollOffset() + this.scrollAdjustments\n      ) {\n        if (process.env.NODE_ENV !== 'production' && this.options.debug) {\n          console.info('correction', delta)\n        }\n\n        this._scrollToOffset(this.getScrollOffset(), {\n          adjustments: (this.scrollAdjustments += delta),\n          behavior: undefined,\n        })\n      }\n\n      this.pendingMeasuredCacheIndexes.push(item.index)\n      this.itemSizeCache = new Map(this.itemSizeCache.set(item.key, size))\n\n      this.notify(false)\n    }\n  }\n\n  measureElement = (node: TItemElement | null | undefined) => {\n    if (!node) {\n      this.elementsCache.forEach((cached, key) => {\n        if (!cached.isConnected) {\n          this.observer.unobserve(cached)\n          this.elementsCache.delete(key)\n        }\n      })\n      return\n    }\n\n    this._measureElement(node, undefined)\n  }\n\n  getVirtualItems = memo(\n    () => [this.getIndexes(), this.getMeasurements()],\n    (indexes, measurements) => {\n      const virtualItems: Array<VirtualItem> = []\n\n      for (let k = 0, len = indexes.length; k < len; k++) {\n        const i = indexes[k]!\n        const measurement = measurements[i]!\n\n        virtualItems.push(measurement)\n      }\n\n      return virtualItems\n    },\n    {\n      key: process.env.NODE_ENV !== 'production' && 'getVirtualItems',\n      debug: () => this.options.debug,\n    },\n  )\n\n  getVirtualItemForOffset = (offset: number) => {\n    const measurements = this.getMeasurements()\n    if (measurements.length === 0) {\n      return undefined\n    }\n    return notUndefined(\n      measurements[\n        findNearestBinarySearch(\n          0,\n          measurements.length - 1,\n          (index: number) => notUndefined(measurements[index]).start,\n          offset,\n        )\n      ],\n    )\n  }\n\n  getOffsetForAlignment = (toOffset: number, align: ScrollAlignment) => {\n    const size = this.getSize()\n    const scrollOffset = this.getScrollOffset()\n\n    if (align === 'auto') {\n      if (toOffset >= scrollOffset + size) {\n        align = 'end'\n      }\n    }\n\n    if (align === 'end') {\n      toOffset -= size\n    }\n\n    const scrollSizeProp = this.options.horizontal\n      ? 'scrollWidth'\n      : 'scrollHeight'\n    const scrollSize = this.scrollElement\n      ? 'document' in this.scrollElement\n        ? this.scrollElement.document.documentElement[scrollSizeProp]\n        : this.scrollElement[scrollSizeProp]\n      : 0\n\n    const maxOffset = scrollSize - size\n\n    return Math.max(Math.min(maxOffset, toOffset), 0)\n  }\n\n  getOffsetForIndex = (index: number, align: ScrollAlignment = 'auto') => {\n    index = Math.max(0, Math.min(index, this.options.count - 1))\n\n    const item = this.measurementsCache[index]\n    if (!item) {\n      return undefined\n    }\n\n    const size = this.getSize()\n    const scrollOffset = this.getScrollOffset()\n\n    if (align === 'auto') {\n      if (item.end >= scrollOffset + size - this.options.scrollPaddingEnd) {\n        align = 'end'\n      } else if (item.start <= scrollOffset + this.options.scrollPaddingStart) {\n        align = 'start'\n      } else {\n        return [scrollOffset, align] as const\n      }\n    }\n\n    const centerOffset =\n      item.start - this.options.scrollPaddingStart + (item.size - size) / 2\n\n    switch (align) {\n      case 'center':\n        return [this.getOffsetForAlignment(centerOffset, align), align] as const\n      case 'end':\n        return [\n          this.getOffsetForAlignment(\n            item.end + this.options.scrollPaddingEnd,\n            align,\n          ),\n          align,\n        ] as const\n      default:\n        return [\n          this.getOffsetForAlignment(\n            item.start - this.options.scrollPaddingStart,\n            align,\n          ),\n          align,\n        ] as const\n    }\n  }\n\n  private isDynamicMode = () => this.elementsCache.size > 0\n\n  private cancelScrollToIndex = () => {\n    if (this.scrollToIndexTimeoutId !== null && this.targetWindow) {\n      this.targetWindow.clearTimeout(this.scrollToIndexTimeoutId)\n      this.scrollToIndexTimeoutId = null\n    }\n  }\n\n  scrollToOffset = (\n    toOffset: number,\n    { align = 'start', behavior }: ScrollToOffsetOptions = {},\n  ) => {\n    this.cancelScrollToIndex()\n\n    if (behavior === 'smooth' && this.isDynamicMode()) {\n      console.warn(\n        'The `smooth` scroll behavior is not fully supported with dynamic size.',\n      )\n    }\n\n    this._scrollToOffset(this.getOffsetForAlignment(toOffset, align), {\n      adjustments: undefined,\n      behavior,\n    })\n  }\n\n  scrollToIndex = (\n    index: number,\n    { align: initialAlign = 'auto', behavior }: ScrollToIndexOptions = {},\n  ) => {\n    index = Math.max(0, Math.min(index, this.options.count - 1))\n\n    this.cancelScrollToIndex()\n\n    if (behavior === 'smooth' && this.isDynamicMode()) {\n      console.warn(\n        'The `smooth` scroll behavior is not fully supported with dynamic size.',\n      )\n    }\n\n    const offsetAndAlign = this.getOffsetForIndex(index, initialAlign)\n    if (!offsetAndAlign) return\n\n    const [offset, align] = offsetAndAlign\n\n    this._scrollToOffset(offset, { adjustments: undefined, behavior })\n\n    if (behavior !== 'smooth' && this.isDynamicMode() && this.targetWindow) {\n      this.scrollToIndexTimeoutId = this.targetWindow.setTimeout(() => {\n        this.scrollToIndexTimeoutId = null\n\n        const elementInDOM = this.elementsCache.has(\n          this.options.getItemKey(index),\n        )\n\n        if (elementInDOM) {\n          const [latestOffset] = notUndefined(\n            this.getOffsetForIndex(index, align),\n          )\n\n          if (!approxEqual(latestOffset, this.getScrollOffset())) {\n            this.scrollToIndex(index, { align, behavior })\n          }\n        } else {\n          this.scrollToIndex(index, { align, behavior })\n        }\n      })\n    }\n  }\n\n  scrollBy = (delta: number, { behavior }: ScrollToOffsetOptions = {}) => {\n    this.cancelScrollToIndex()\n\n    if (behavior === 'smooth' && this.isDynamicMode()) {\n      console.warn(\n        'The `smooth` scroll behavior is not fully supported with dynamic size.',\n      )\n    }\n\n    this._scrollToOffset(this.getScrollOffset() + delta, {\n      adjustments: undefined,\n      behavior,\n    })\n  }\n\n  getTotalSize = () => {\n    const measurements = this.getMeasurements()\n\n    let end: number\n    // If there are no measurements, set the end to paddingStart\n    if (measurements.length === 0) {\n      end = this.options.paddingStart\n    } else {\n      // If lanes is 1, use the last measurement's end, otherwise find the maximum end value among all measurements\n      end =\n        this.options.lanes === 1\n          ? (measurements[measurements.length - 1]?.end ?? 0)\n          : Math.max(\n              ...measurements.slice(-this.options.lanes).map((m) => m.end),\n            )\n    }\n\n    return Math.max(\n      end - this.options.scrollMargin + this.options.paddingEnd,\n      0,\n    )\n  }\n\n  private _scrollToOffset = (\n    offset: number,\n    {\n      adjustments,\n      behavior,\n    }: {\n      adjustments: number | undefined\n      behavior: ScrollBehavior | undefined\n    },\n  ) => {\n    this.options.scrollToFn(offset, { behavior, adjustments }, this)\n  }\n\n  measure = () => {\n    this.itemSizeCache = new Map()\n    this.notify(false)\n  }\n}\n\nconst findNearestBinarySearch = (\n  low: number,\n  high: number,\n  getCurrentValue: (i: number) => number,\n  value: number,\n) => {\n  while (low <= high) {\n    const middle = ((low + high) / 2) | 0\n    const currentValue = getCurrentValue(middle)\n\n    if (currentValue < value) {\n      low = middle + 1\n    } else if (currentValue > value) {\n      high = middle - 1\n    } else {\n      return middle\n    }\n  }\n\n  if (low > 0) {\n    return low - 1\n  } else {\n    return 0\n  }\n}\n\nfunction calculateRange({\n  measurements,\n  outerSize,\n  scrollOffset,\n}: {\n  measurements: Array<VirtualItem>\n  outerSize: number\n  scrollOffset: number\n}) {\n  const count = measurements.length - 1\n  const getOffset = (index: number) => measurements[index]!.start\n\n  const startIndex = findNearestBinarySearch(0, count, getOffset, scrollOffset)\n  let endIndex = startIndex\n\n  while (\n    endIndex < count &&\n    measurements[endIndex]!.end < scrollOffset + outerSize\n  ) {\n    endIndex++\n  }\n\n  return { startIndex, endIndex }\n}\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}