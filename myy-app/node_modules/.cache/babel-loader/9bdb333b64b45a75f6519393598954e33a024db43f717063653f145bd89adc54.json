{"ast":null,"code":"import { getOwnerDocument as $jlOai$getOwnerDocument, runAfterTransition as $jlOai$runAfterTransition, focusWithoutScrolling as $jlOai$focusWithoutScrolling } from \"@react-aria/utils\";\nimport { getInteractionModality as $jlOai$getInteractionModality } from \"@react-aria/interactions\";\n\n/*\n * Copyright 2020 Adobe. All rights reserved.\n * This file is licensed to you under the Apache License, Version 2.0 (the 'License');\n * you may not use this file except in compliance with the License. You may obtain a copy\n * of the License at http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software distributed under\n * the License is distributed on an 'AS IS' BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\n * OF ANY KIND, either express or implied. See the License for the specific language\n * governing permissions and limitations under the License.\n */\n\nfunction $6a99195332edec8b$export$80f3e147d781571c(element) {\n  // If the user is interacting with a virtual cursor, e.g. screen reader, then\n  // wait until after any animated transitions that are currently occurring on\n  // the page before shifting focus. This avoids issues with VoiceOver on iOS\n  // causing the page to scroll when moving focus if the element is transitioning\n  // from off the screen.\n  const ownerDocument = (0, $jlOai$getOwnerDocument)(element);\n  if ((0, $jlOai$getInteractionModality)() === 'virtual') {\n    let lastFocusedElement = ownerDocument.activeElement;\n    (0, $jlOai$runAfterTransition)(() => {\n      // If focus did not move and the element is still in the document, focus it.\n      if (ownerDocument.activeElement === lastFocusedElement && element.isConnected) (0, $jlOai$focusWithoutScrolling)(element);\n    });\n  } else (0, $jlOai$focusWithoutScrolling)(element);\n}\nexport { $6a99195332edec8b$export$80f3e147d781571c as focusSafely };","map":{"version":3,"mappings":";;;AAAA;;;;;;;;;;;;AAoBO,SAASA,0CAAYC,OAAyB;EACnD;EACA;EACA;EACA;EACA;EACA,MAAMC,gBAAgB,2BAAe,EAAED;EACvC,IAAI,iCAAqB,QAAQ,WAAW;IAC1C,IAAIE,qBAAqBD,cAAcE,aAAa;IACpD,6BAAiB,EAAE;MACjB;MACA,IAAIF,cAAcE,aAAa,KAAKD,sBAAsBF,QAAQI,WAAW,EAC3E,gCAAoB,EAAEJ;IAE1B;EACF,OACE,gCAAoB,EAAEA;AAE1B","names":["$6a99195332edec8b$export$80f3e147d781571c","element","ownerDocument","lastFocusedElement","activeElement","isConnected"],"sources":["C:\\Users\\aiwar\\Desktop\\cloth\\myy-app\\node_modules\\@react-aria\\focus\\dist\\packages\\@react-aria\\focus\\src\\focusSafely.ts"],"sourcesContent":["/*\n * Copyright 2020 Adobe. All rights reserved.\n * This file is licensed to you under the Apache License, Version 2.0 (the 'License');\n * you may not use this file except in compliance with the License. You may obtain a copy\n * of the License at http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software distributed under\n * the License is distributed on an 'AS IS' BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\n * OF ANY KIND, either express or implied. See the License for the specific language\n * governing permissions and limitations under the License.\n */\n\nimport {FocusableElement} from '@react-types/shared';\nimport {focusWithoutScrolling, getOwnerDocument, runAfterTransition} from '@react-aria/utils';\nimport {getInteractionModality} from '@react-aria/interactions';\n\n/**\n * A utility function that focuses an element while avoiding undesired side effects such\n * as page scrolling and screen reader issues with CSS transitions.\n */\nexport function focusSafely(element: FocusableElement) {\n  // If the user is interacting with a virtual cursor, e.g. screen reader, then\n  // wait until after any animated transitions that are currently occurring on\n  // the page before shifting focus. This avoids issues with VoiceOver on iOS\n  // causing the page to scroll when moving focus if the element is transitioning\n  // from off the screen.\n  const ownerDocument = getOwnerDocument(element);\n  if (getInteractionModality() === 'virtual') {\n    let lastFocusedElement = ownerDocument.activeElement;\n    runAfterTransition(() => {\n      // If focus did not move and the element is still in the document, focus it.\n      if (ownerDocument.activeElement === lastFocusedElement && element.isConnected) {\n        focusWithoutScrolling(element);\n      }\n    });\n  } else {\n    focusWithoutScrolling(element);\n  }\n}\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}