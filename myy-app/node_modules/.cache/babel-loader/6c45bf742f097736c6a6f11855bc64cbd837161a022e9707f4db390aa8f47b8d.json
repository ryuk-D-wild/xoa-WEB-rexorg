{"ast":null,"code":"import { disableTextSelection as $14c0b72509d70225$export$16a4697467175487, restoreTextSelection as $14c0b72509d70225$export$b0d6fa1ab32e3295 } from \"./textSelection.mjs\";\nimport { useRef as $5GN7j$useRef, useMemo as $5GN7j$useMemo } from \"react\";\nimport { useGlobalListeners as $5GN7j$useGlobalListeners, useEffectEvent as $5GN7j$useEffectEvent } from \"@react-aria/utils\";\n\n/*\n * Copyright 2020 Adobe. All rights reserved.\n * This file is licensed to you under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License. You may obtain a copy\n * of the License at http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software distributed under\n * the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\n * OF ANY KIND, either express or implied. See the License for the specific language\n * governing permissions and limitations under the License.\n */\n\nfunction $e8a7022cf87cba2a$export$36da96379f79f245(props) {\n  let {\n    onMoveStart: onMoveStart,\n    onMove: onMove,\n    onMoveEnd: onMoveEnd\n  } = props;\n  let state = (0, $5GN7j$useRef)({\n    didMove: false,\n    lastPosition: null,\n    id: null\n  });\n  let {\n    addGlobalListener: addGlobalListener,\n    removeGlobalListener: removeGlobalListener\n  } = (0, $5GN7j$useGlobalListeners)();\n  let move = (0, $5GN7j$useEffectEvent)((originalEvent, pointerType, deltaX, deltaY) => {\n    if (deltaX === 0 && deltaY === 0) return;\n    if (!state.current.didMove) {\n      state.current.didMove = true;\n      onMoveStart === null || onMoveStart === void 0 ? void 0 : onMoveStart({\n        type: 'movestart',\n        pointerType: pointerType,\n        shiftKey: originalEvent.shiftKey,\n        metaKey: originalEvent.metaKey,\n        ctrlKey: originalEvent.ctrlKey,\n        altKey: originalEvent.altKey\n      });\n    }\n    onMove === null || onMove === void 0 ? void 0 : onMove({\n      type: 'move',\n      pointerType: pointerType,\n      deltaX: deltaX,\n      deltaY: deltaY,\n      shiftKey: originalEvent.shiftKey,\n      metaKey: originalEvent.metaKey,\n      ctrlKey: originalEvent.ctrlKey,\n      altKey: originalEvent.altKey\n    });\n  });\n  let end = (0, $5GN7j$useEffectEvent)((originalEvent, pointerType) => {\n    (0, $14c0b72509d70225$export$b0d6fa1ab32e3295)();\n    if (state.current.didMove) onMoveEnd === null || onMoveEnd === void 0 ? void 0 : onMoveEnd({\n      type: 'moveend',\n      pointerType: pointerType,\n      shiftKey: originalEvent.shiftKey,\n      metaKey: originalEvent.metaKey,\n      ctrlKey: originalEvent.ctrlKey,\n      altKey: originalEvent.altKey\n    });\n  });\n  let moveProps = (0, $5GN7j$useMemo)(() => {\n    let moveProps = {};\n    let start = () => {\n      (0, $14c0b72509d70225$export$16a4697467175487)();\n      state.current.didMove = false;\n    };\n    if (typeof PointerEvent === 'undefined') {\n      let onMouseMove = e => {\n        if (e.button === 0) {\n          var _state_current_lastPosition, _state_current_lastPosition1;\n          var _state_current_lastPosition_pageX, _state_current_lastPosition_pageY;\n          move(e, 'mouse', e.pageX - ((_state_current_lastPosition_pageX = (_state_current_lastPosition = state.current.lastPosition) === null || _state_current_lastPosition === void 0 ? void 0 : _state_current_lastPosition.pageX) !== null && _state_current_lastPosition_pageX !== void 0 ? _state_current_lastPosition_pageX : 0), e.pageY - ((_state_current_lastPosition_pageY = (_state_current_lastPosition1 = state.current.lastPosition) === null || _state_current_lastPosition1 === void 0 ? void 0 : _state_current_lastPosition1.pageY) !== null && _state_current_lastPosition_pageY !== void 0 ? _state_current_lastPosition_pageY : 0));\n          state.current.lastPosition = {\n            pageX: e.pageX,\n            pageY: e.pageY\n          };\n        }\n      };\n      let onMouseUp = e => {\n        if (e.button === 0) {\n          end(e, 'mouse');\n          removeGlobalListener(window, 'mousemove', onMouseMove, false);\n          removeGlobalListener(window, 'mouseup', onMouseUp, false);\n        }\n      };\n      moveProps.onMouseDown = e => {\n        if (e.button === 0) {\n          start();\n          e.stopPropagation();\n          e.preventDefault();\n          state.current.lastPosition = {\n            pageX: e.pageX,\n            pageY: e.pageY\n          };\n          addGlobalListener(window, 'mousemove', onMouseMove, false);\n          addGlobalListener(window, 'mouseup', onMouseUp, false);\n        }\n      };\n      let onTouchMove = e => {\n        let touch = [...e.changedTouches].findIndex(_ref => {\n          let {\n            identifier: identifier\n          } = _ref;\n          return identifier === state.current.id;\n        });\n        if (touch >= 0) {\n          var _state_current_lastPosition, _state_current_lastPosition1;\n          let {\n            pageX: pageX,\n            pageY: pageY\n          } = e.changedTouches[touch];\n          var _state_current_lastPosition_pageX, _state_current_lastPosition_pageY;\n          move(e, 'touch', pageX - ((_state_current_lastPosition_pageX = (_state_current_lastPosition = state.current.lastPosition) === null || _state_current_lastPosition === void 0 ? void 0 : _state_current_lastPosition.pageX) !== null && _state_current_lastPosition_pageX !== void 0 ? _state_current_lastPosition_pageX : 0), pageY - ((_state_current_lastPosition_pageY = (_state_current_lastPosition1 = state.current.lastPosition) === null || _state_current_lastPosition1 === void 0 ? void 0 : _state_current_lastPosition1.pageY) !== null && _state_current_lastPosition_pageY !== void 0 ? _state_current_lastPosition_pageY : 0));\n          state.current.lastPosition = {\n            pageX: pageX,\n            pageY: pageY\n          };\n        }\n      };\n      let onTouchEnd = e => {\n        let touch = [...e.changedTouches].findIndex(_ref2 => {\n          let {\n            identifier: identifier\n          } = _ref2;\n          return identifier === state.current.id;\n        });\n        if (touch >= 0) {\n          end(e, 'touch');\n          state.current.id = null;\n          removeGlobalListener(window, 'touchmove', onTouchMove);\n          removeGlobalListener(window, 'touchend', onTouchEnd);\n          removeGlobalListener(window, 'touchcancel', onTouchEnd);\n        }\n      };\n      moveProps.onTouchStart = e => {\n        if (e.changedTouches.length === 0 || state.current.id != null) return;\n        let {\n          pageX: pageX,\n          pageY: pageY,\n          identifier: identifier\n        } = e.changedTouches[0];\n        start();\n        e.stopPropagation();\n        e.preventDefault();\n        state.current.lastPosition = {\n          pageX: pageX,\n          pageY: pageY\n        };\n        state.current.id = identifier;\n        addGlobalListener(window, 'touchmove', onTouchMove, false);\n        addGlobalListener(window, 'touchend', onTouchEnd, false);\n        addGlobalListener(window, 'touchcancel', onTouchEnd, false);\n      };\n    } else {\n      let onPointerMove = e => {\n        if (e.pointerId === state.current.id) {\n          var _state_current_lastPosition, _state_current_lastPosition1;\n          let pointerType = e.pointerType || 'mouse';\n          var _state_current_lastPosition_pageX, _state_current_lastPosition_pageY;\n          // Problems with PointerEvent#movementX/movementY:\n          // 1. it is always 0 on macOS Safari.\n          // 2. On Chrome Android, it's scaled by devicePixelRatio, but not on Chrome macOS\n          move(e, pointerType, e.pageX - ((_state_current_lastPosition_pageX = (_state_current_lastPosition = state.current.lastPosition) === null || _state_current_lastPosition === void 0 ? void 0 : _state_current_lastPosition.pageX) !== null && _state_current_lastPosition_pageX !== void 0 ? _state_current_lastPosition_pageX : 0), e.pageY - ((_state_current_lastPosition_pageY = (_state_current_lastPosition1 = state.current.lastPosition) === null || _state_current_lastPosition1 === void 0 ? void 0 : _state_current_lastPosition1.pageY) !== null && _state_current_lastPosition_pageY !== void 0 ? _state_current_lastPosition_pageY : 0));\n          state.current.lastPosition = {\n            pageX: e.pageX,\n            pageY: e.pageY\n          };\n        }\n      };\n      let onPointerUp = e => {\n        if (e.pointerId === state.current.id) {\n          let pointerType = e.pointerType || 'mouse';\n          end(e, pointerType);\n          state.current.id = null;\n          removeGlobalListener(window, 'pointermove', onPointerMove, false);\n          removeGlobalListener(window, 'pointerup', onPointerUp, false);\n          removeGlobalListener(window, 'pointercancel', onPointerUp, false);\n        }\n      };\n      moveProps.onPointerDown = e => {\n        if (e.button === 0 && state.current.id == null) {\n          start();\n          e.stopPropagation();\n          e.preventDefault();\n          state.current.lastPosition = {\n            pageX: e.pageX,\n            pageY: e.pageY\n          };\n          state.current.id = e.pointerId;\n          addGlobalListener(window, 'pointermove', onPointerMove, false);\n          addGlobalListener(window, 'pointerup', onPointerUp, false);\n          addGlobalListener(window, 'pointercancel', onPointerUp, false);\n        }\n      };\n    }\n    let triggerKeyboardMove = (e, deltaX, deltaY) => {\n      start();\n      move(e, 'keyboard', deltaX, deltaY);\n      end(e, 'keyboard');\n    };\n    moveProps.onKeyDown = e => {\n      switch (e.key) {\n        case 'Left':\n        case 'ArrowLeft':\n          e.preventDefault();\n          e.stopPropagation();\n          triggerKeyboardMove(e, -1, 0);\n          break;\n        case 'Right':\n        case 'ArrowRight':\n          e.preventDefault();\n          e.stopPropagation();\n          triggerKeyboardMove(e, 1, 0);\n          break;\n        case 'Up':\n        case 'ArrowUp':\n          e.preventDefault();\n          e.stopPropagation();\n          triggerKeyboardMove(e, 0, -1);\n          break;\n        case 'Down':\n        case 'ArrowDown':\n          e.preventDefault();\n          e.stopPropagation();\n          triggerKeyboardMove(e, 0, 1);\n          break;\n      }\n    };\n    return moveProps;\n  }, [state, addGlobalListener, removeGlobalListener, move, end]);\n  return {\n    moveProps: moveProps\n  };\n}\nexport { $e8a7022cf87cba2a$export$36da96379f79f245 as useMove };","map":{"version":3,"mappings":"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","names":["$e8a7022cf87cba2a$export$36da96379f79f245","props","onMoveStart","onMove","onMoveEnd","state","didMove","lastPosition","id","addGlobalListener","removeGlobalListener","move","originalEvent","pointerType","deltaX","deltaY","current","type","shiftKey","metaKey","ctrlKey","altKey","end","moveProps","start","PointerEvent","onMouseMove","e","button","_state_current_lastPosition","_state_current_lastPosition1","_state_current_lastPosition_pageX","_state_current_lastPosition_pageY","pageX","pageY","onMouseUp","window","onMouseDown","stopPropagation","preventDefault","onTouchMove","touch","changedTouches","findIndex","identifier","onTouchEnd","onTouchStart","length","onPointerMove","pointerId","onPointerUp","onPointerDown","triggerKeyboardMove","onKeyDown","key"],"sources":["C:\\Users\\aiwar\\Desktop\\cloth\\myy-app\\node_modules\\@react-aria\\interactions\\dist\\packages\\@react-aria\\interactions\\src\\useMove.ts"],"sourcesContent":["/*\n * Copyright 2020 Adobe. All rights reserved.\n * This file is licensed to you under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License. You may obtain a copy\n * of the License at http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software distributed under\n * the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\n * OF ANY KIND, either express or implied. See the License for the specific language\n * governing permissions and limitations under the License.\n */\n\nimport {disableTextSelection, restoreTextSelection}  from './textSelection';\nimport {DOMAttributes, MoveEvents, PointerType} from '@react-types/shared';\nimport React, {useMemo, useRef} from 'react';\nimport {useEffectEvent, useGlobalListeners} from '@react-aria/utils';\n\nexport interface MoveResult {\n  /** Props to spread on the target element. */\n  moveProps: DOMAttributes\n}\n\ninterface EventBase {\n  shiftKey: boolean,\n  ctrlKey: boolean,\n  metaKey: boolean,\n  altKey: boolean\n}\n\n/**\n * Handles move interactions across mouse, touch, and keyboard, including dragging with\n * the mouse or touch, and using the arrow keys. Normalizes behavior across browsers and\n * platforms, and ignores emulated mouse events on touch devices.\n */\nexport function useMove(props: MoveEvents): MoveResult {\n  let {onMoveStart, onMove, onMoveEnd} = props;\n\n  let state = useRef<{\n    didMove: boolean,\n    lastPosition: {pageX: number, pageY: number} | null,\n    id: number | null\n  }>({didMove: false, lastPosition: null, id: null});\n\n  let {addGlobalListener, removeGlobalListener} = useGlobalListeners();\n\n  let move = useEffectEvent((originalEvent: EventBase, pointerType: PointerType, deltaX: number, deltaY: number) => {\n    if (deltaX === 0 && deltaY === 0) {\n      return;\n    }\n\n    if (!state.current.didMove) {\n      state.current.didMove = true;\n      onMoveStart?.({\n        type: 'movestart',\n        pointerType,\n        shiftKey: originalEvent.shiftKey,\n        metaKey: originalEvent.metaKey,\n        ctrlKey: originalEvent.ctrlKey,\n        altKey: originalEvent.altKey\n      });\n    }\n    onMove?.({\n      type: 'move',\n      pointerType,\n      deltaX: deltaX,\n      deltaY: deltaY,\n      shiftKey: originalEvent.shiftKey,\n      metaKey: originalEvent.metaKey,\n      ctrlKey: originalEvent.ctrlKey,\n      altKey: originalEvent.altKey\n    });\n  });\n\n  let end = useEffectEvent((originalEvent: EventBase, pointerType: PointerType) => {\n    restoreTextSelection();\n    if (state.current.didMove) {\n      onMoveEnd?.({\n        type: 'moveend',\n        pointerType,\n        shiftKey: originalEvent.shiftKey,\n        metaKey: originalEvent.metaKey,\n        ctrlKey: originalEvent.ctrlKey,\n        altKey: originalEvent.altKey\n      });\n    }\n  });\n\n  let moveProps = useMemo(() => {\n    let moveProps: DOMAttributes = {};\n\n    let start = () => {\n      disableTextSelection();\n      state.current.didMove = false;\n    };\n\n    if (typeof PointerEvent === 'undefined') {\n      let onMouseMove = (e: MouseEvent) => {\n        if (e.button === 0) {\n          move(e, 'mouse', e.pageX - (state.current.lastPosition?.pageX ?? 0), e.pageY - (state.current.lastPosition?.pageY ?? 0));\n          state.current.lastPosition = {pageX: e.pageX, pageY: e.pageY};\n        }\n      };\n      let onMouseUp = (e: MouseEvent) => {\n        if (e.button === 0) {\n          end(e, 'mouse');\n          removeGlobalListener(window, 'mousemove', onMouseMove, false);\n          removeGlobalListener(window, 'mouseup', onMouseUp, false);\n        }\n      };\n      moveProps.onMouseDown = (e: React.MouseEvent) => {\n        if (e.button === 0) {\n          start();\n          e.stopPropagation();\n          e.preventDefault();\n          state.current.lastPosition = {pageX: e.pageX, pageY: e.pageY};\n          addGlobalListener(window, 'mousemove', onMouseMove, false);\n          addGlobalListener(window, 'mouseup', onMouseUp, false);\n        }\n      };\n\n      let onTouchMove = (e: TouchEvent) => {\n        let touch = [...e.changedTouches].findIndex(({identifier}) => identifier === state.current.id);\n        if (touch >= 0) {\n          let {pageX, pageY} = e.changedTouches[touch];\n          move(e, 'touch', pageX - (state.current.lastPosition?.pageX ?? 0), pageY - (state.current.lastPosition?.pageY ?? 0));\n          state.current.lastPosition = {pageX, pageY};\n        }\n      };\n      let onTouchEnd = (e: TouchEvent) => {\n        let touch = [...e.changedTouches].findIndex(({identifier}) => identifier === state.current.id);\n        if (touch >= 0) {\n          end(e, 'touch');\n          state.current.id = null;\n          removeGlobalListener(window, 'touchmove', onTouchMove);\n          removeGlobalListener(window, 'touchend', onTouchEnd);\n          removeGlobalListener(window, 'touchcancel', onTouchEnd);\n        }\n      };\n      moveProps.onTouchStart = (e: React.TouchEvent) => {\n        if (e.changedTouches.length === 0 || state.current.id != null) {\n          return;\n        }\n\n        let {pageX, pageY, identifier} = e.changedTouches[0];\n        start();\n        e.stopPropagation();\n        e.preventDefault();\n        state.current.lastPosition = {pageX, pageY};\n        state.current.id = identifier;\n        addGlobalListener(window, 'touchmove', onTouchMove, false);\n        addGlobalListener(window, 'touchend', onTouchEnd, false);\n        addGlobalListener(window, 'touchcancel', onTouchEnd, false);\n      };\n    } else {\n      let onPointerMove = (e: PointerEvent) => {\n        if (e.pointerId === state.current.id) {\n          let pointerType = (e.pointerType || 'mouse') as PointerType;\n\n          // Problems with PointerEvent#movementX/movementY:\n          // 1. it is always 0 on macOS Safari.\n          // 2. On Chrome Android, it's scaled by devicePixelRatio, but not on Chrome macOS\n          move(e, pointerType, e.pageX - (state.current.lastPosition?.pageX ?? 0), e.pageY - (state.current.lastPosition?.pageY ?? 0));\n          state.current.lastPosition = {pageX: e.pageX, pageY: e.pageY};\n        }\n      };\n\n      let onPointerUp = (e: PointerEvent) => {\n        if (e.pointerId === state.current.id) {\n          let pointerType = (e.pointerType || 'mouse') as PointerType;\n          end(e, pointerType);\n          state.current.id = null;\n          removeGlobalListener(window, 'pointermove', onPointerMove, false);\n          removeGlobalListener(window, 'pointerup', onPointerUp, false);\n          removeGlobalListener(window, 'pointercancel', onPointerUp, false);\n        }\n      };\n\n      moveProps.onPointerDown = (e: React.PointerEvent) => {\n        if (e.button === 0 && state.current.id == null) {\n          start();\n          e.stopPropagation();\n          e.preventDefault();\n          state.current.lastPosition = {pageX: e.pageX, pageY: e.pageY};\n          state.current.id = e.pointerId;\n          addGlobalListener(window, 'pointermove', onPointerMove, false);\n          addGlobalListener(window, 'pointerup', onPointerUp, false);\n          addGlobalListener(window, 'pointercancel', onPointerUp, false);\n        }\n      };\n    }\n\n    let triggerKeyboardMove = (e: EventBase, deltaX: number, deltaY: number) => {\n      start();\n      move(e, 'keyboard', deltaX, deltaY);\n      end(e, 'keyboard');\n    };\n\n    moveProps.onKeyDown = (e) => {\n      switch (e.key) {\n        case 'Left':\n        case 'ArrowLeft':\n          e.preventDefault();\n          e.stopPropagation();\n          triggerKeyboardMove(e, -1, 0);\n          break;\n        case 'Right':\n        case 'ArrowRight':\n          e.preventDefault();\n          e.stopPropagation();\n          triggerKeyboardMove(e, 1, 0);\n          break;\n        case 'Up':\n        case 'ArrowUp':\n          e.preventDefault();\n          e.stopPropagation();\n          triggerKeyboardMove(e, 0, -1);\n          break;\n        case 'Down':\n        case 'ArrowDown':\n          e.preventDefault();\n          e.stopPropagation();\n          triggerKeyboardMove(e, 0, 1);\n          break;\n      }\n    };\n\n    return moveProps;\n  }, [state, addGlobalListener, removeGlobalListener, move, end]);\n\n  return {moveProps};\n}\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}