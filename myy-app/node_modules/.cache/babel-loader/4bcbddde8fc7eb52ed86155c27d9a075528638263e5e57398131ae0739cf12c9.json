{"ast":null,"code":"import { useSyntheticBlurEvent as $8a9cb279dc87e130$export$715c682d09d639cc } from \"./utils.mjs\";\nimport { useCallback as $hf0lj$useCallback } from \"react\";\nimport { getOwnerDocument as $hf0lj$getOwnerDocument } from \"@react-aria/utils\";\n\n/*\n * Copyright 2020 Adobe. All rights reserved.\n * This file is licensed to you under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License. You may obtain a copy\n * of the License at http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software distributed under\n * the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\n * OF ANY KIND, either express or implied. See the License for the specific language\n * governing permissions and limitations under the License.\n */ // Portions of the code in this file are based on code from react.\n// Original licensing for the following can be found in the\n// NOTICE file in the root directory of this source tree.\n// See https://github.com/facebook/react/tree/cc7c1aece46a6b69b41958d731e0fd27c94bfc6c/packages/react-interactions\n\nfunction $a1ea59d68270f0dd$export$f8168d8dd8fd66e6(props) {\n  let {\n    isDisabled: isDisabled,\n    onFocus: onFocusProp,\n    onBlur: onBlurProp,\n    onFocusChange: onFocusChange\n  } = props;\n  const onBlur = (0, $hf0lj$useCallback)(e => {\n    if (e.target === e.currentTarget) {\n      if (onBlurProp) onBlurProp(e);\n      if (onFocusChange) onFocusChange(false);\n      return true;\n    }\n  }, [onBlurProp, onFocusChange]);\n  const onSyntheticFocus = (0, $8a9cb279dc87e130$export$715c682d09d639cc)(onBlur);\n  const onFocus = (0, $hf0lj$useCallback)(e => {\n    // Double check that document.activeElement actually matches e.target in case a previously chained\n    // focus handler already moved focus somewhere else.\n    const ownerDocument = (0, $hf0lj$getOwnerDocument)(e.target);\n    if (e.target === e.currentTarget && ownerDocument.activeElement === e.target) {\n      if (onFocusProp) onFocusProp(e);\n      if (onFocusChange) onFocusChange(true);\n      onSyntheticFocus(e);\n    }\n  }, [onFocusChange, onFocusProp, onSyntheticFocus]);\n  return {\n    focusProps: {\n      onFocus: !isDisabled && (onFocusProp || onFocusChange || onBlurProp) ? onFocus : undefined,\n      onBlur: !isDisabled && (onBlurProp || onFocusChange) ? onBlur : undefined\n    }\n  };\n}\nexport { $a1ea59d68270f0dd$export$f8168d8dd8fd66e6 as useFocus };","map":{"version":3,"mappings":";;;;AAAA;;;;;;;;;;GAAA,CAYA;AACA;AACA;AACA;;AAqBO,SAASA,0CAA6DC,KAAyB;EACpG,IAAI;IAAAC,YACFA,UAAU;IACVC,SAASC,WAAW;IACpBC,QAAQC,UAAU;IAAAC,eAClBA;EAAa,CACd,GAAGN;EAEJ,MAAMI,SAAuC,sBAAU,EAAGG;IACxD,IAAIA,EAAEC,MAAM,KAAKD,EAAEE,aAAa,EAAE;MAChC,IAAIJ,YACFA,WAAWE;MAGb,IAAID,eACFA,cAAc;MAGhB,OAAO;IACT;EACF,GAAG,CAACD,YAAYC,cAAc;EAG9B,MAAMI,mBAAmB,6CAAoB,EAAUN;EAEvD,MAAMF,UAAyC,sBAAU,EAAGK;IAC1D;IACA;IAEA,MAAMI,gBAAgB,2BAAe,EAAEJ,EAAEC,MAAM;IAE/C,IAAID,EAAEC,MAAM,KAAKD,EAAEE,aAAa,IAAIE,cAAcC,aAAa,KAAKL,EAAEC,MAAM,EAAE;MAC5E,IAAIL,aACFA,YAAYI;MAGd,IAAID,eACFA,cAAc;MAGhBI,iBAAiBH;IACnB;EACF,GAAG,CAACD,eAAeH,aAAaO,iBAAiB;EAEjD,OAAO;IACLG,YAAY;MACVX,SAAS,CAAED,eAAeE,eAAeG,iBAAiBD,UAAS,IAAMH,UAAUY;MACnFV,QAAQ,CAAEH,eAAeI,cAAcC,aAAY,IAAMF,SAASU;IACpE;EACF;AACF","names":["$a1ea59d68270f0dd$export$f8168d8dd8fd66e6","props","isDisabled","onFocus","onFocusProp","onBlur","onBlurProp","onFocusChange","e","target","currentTarget","onSyntheticFocus","ownerDocument","activeElement","focusProps","undefined"],"sources":["C:\\Users\\aiwar\\Desktop\\cloth\\myy-app\\node_modules\\@react-aria\\interactions\\dist\\packages\\@react-aria\\interactions\\src\\useFocus.ts"],"sourcesContent":["/*\n * Copyright 2020 Adobe. All rights reserved.\n * This file is licensed to you under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License. You may obtain a copy\n * of the License at http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software distributed under\n * the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\n * OF ANY KIND, either express or implied. See the License for the specific language\n * governing permissions and limitations under the License.\n */\n\n// Portions of the code in this file are based on code from react.\n// Original licensing for the following can be found in the\n// NOTICE file in the root directory of this source tree.\n// See https://github.com/facebook/react/tree/cc7c1aece46a6b69b41958d731e0fd27c94bfc6c/packages/react-interactions\n\nimport {DOMAttributes, FocusableElement, FocusEvents} from '@react-types/shared';\nimport {FocusEvent, useCallback} from 'react';\nimport {getOwnerDocument} from '@react-aria/utils';\nimport {useSyntheticBlurEvent} from './utils';\n\nexport interface FocusProps<Target = FocusableElement> extends FocusEvents<Target> {\n  /** Whether the focus events should be disabled. */\n  isDisabled?: boolean\n}\n\nexport interface FocusResult<Target = FocusableElement> {\n  /** Props to spread onto the target element. */\n  focusProps: DOMAttributes<Target>\n}\n\n/**\n * Handles focus events for the immediate target.\n * Focus events on child elements will be ignored.\n */\nexport function useFocus<Target extends FocusableElement = FocusableElement>(props: FocusProps<Target>): FocusResult<Target> {\n  let {\n    isDisabled,\n    onFocus: onFocusProp,\n    onBlur: onBlurProp,\n    onFocusChange\n  } = props;\n\n  const onBlur: FocusProps<Target>['onBlur'] = useCallback((e: FocusEvent<Target>) => {\n    if (e.target === e.currentTarget) {\n      if (onBlurProp) {\n        onBlurProp(e);\n      }\n\n      if (onFocusChange) {\n        onFocusChange(false);\n      }\n\n      return true;\n    }\n  }, [onBlurProp, onFocusChange]);\n\n\n  const onSyntheticFocus = useSyntheticBlurEvent<Target>(onBlur);\n\n  const onFocus: FocusProps<Target>['onFocus'] = useCallback((e: FocusEvent<Target>) => {\n    // Double check that document.activeElement actually matches e.target in case a previously chained\n    // focus handler already moved focus somewhere else.\n\n    const ownerDocument = getOwnerDocument(e.target);\n\n    if (e.target === e.currentTarget && ownerDocument.activeElement === e.target) {\n      if (onFocusProp) {\n        onFocusProp(e);\n      }\n\n      if (onFocusChange) {\n        onFocusChange(true);\n      }\n\n      onSyntheticFocus(e);\n    }\n  }, [onFocusChange, onFocusProp, onSyntheticFocus]);\n\n  return {\n    focusProps: {\n      onFocus: (!isDisabled && (onFocusProp || onFocusChange || onBlurProp)) ? onFocus : undefined,\n      onBlur: (!isDisabled && (onBlurProp || onFocusChange)) ? onBlur : undefined\n    }\n  };\n}\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}