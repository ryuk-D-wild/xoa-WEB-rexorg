{"ast":null,"code":"import { useRef as $6dfIe$useRef, useCallback as $6dfIe$useCallback } from \"react\";\nimport { useLayoutEffect as $6dfIe$useLayoutEffect, useEffectEvent as $6dfIe$useEffectEvent } from \"@react-aria/utils\";\n\n/*\n * Copyright 2020 Adobe. All rights reserved.\n * This file is licensed to you under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License. You may obtain a copy\n * of the License at http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software distributed under\n * the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\n * OF ANY KIND, either express or implied. See the License for the specific language\n * governing permissions and limitations under the License.\n */\n\nclass $8a9cb279dc87e130$export$905e7fc544a71f36 {\n  isDefaultPrevented() {\n    return this.nativeEvent.defaultPrevented;\n  }\n  preventDefault() {\n    this.defaultPrevented = true;\n    this.nativeEvent.preventDefault();\n  }\n  stopPropagation() {\n    this.nativeEvent.stopPropagation();\n    this.isPropagationStopped = () => true;\n  }\n  isPropagationStopped() {\n    return false;\n  }\n  persist() {}\n  constructor(type, nativeEvent) {\n    this.nativeEvent = nativeEvent;\n    this.target = nativeEvent.target;\n    this.currentTarget = nativeEvent.currentTarget;\n    this.relatedTarget = nativeEvent.relatedTarget;\n    this.bubbles = nativeEvent.bubbles;\n    this.cancelable = nativeEvent.cancelable;\n    this.defaultPrevented = nativeEvent.defaultPrevented;\n    this.eventPhase = nativeEvent.eventPhase;\n    this.isTrusted = nativeEvent.isTrusted;\n    this.timeStamp = nativeEvent.timeStamp;\n    this.type = type;\n  }\n}\nfunction $8a9cb279dc87e130$export$715c682d09d639cc(onBlur) {\n  let stateRef = (0, $6dfIe$useRef)({\n    isFocused: false,\n    observer: null\n  });\n  // Clean up MutationObserver on unmount. See below.\n  (0, $6dfIe$useLayoutEffect)(() => {\n    const state = stateRef.current;\n    return () => {\n      if (state.observer) {\n        state.observer.disconnect();\n        state.observer = null;\n      }\n    };\n  }, []);\n  let dispatchBlur = (0, $6dfIe$useEffectEvent)(e => {\n    onBlur === null || onBlur === void 0 ? void 0 : onBlur(e);\n  });\n  // This function is called during a React onFocus event.\n  return (0, $6dfIe$useCallback)(e => {\n    // React does not fire onBlur when an element is disabled. https://github.com/facebook/react/issues/9142\n    // Most browsers fire a native focusout event in this case, except for Firefox. In that case, we use a\n    // MutationObserver to watch for the disabled attribute, and dispatch these events ourselves.\n    // For browsers that do, focusout fires before the MutationObserver, so onBlur should not fire twice.\n    if (e.target instanceof HTMLButtonElement || e.target instanceof HTMLInputElement || e.target instanceof HTMLTextAreaElement || e.target instanceof HTMLSelectElement) {\n      stateRef.current.isFocused = true;\n      let target = e.target;\n      let onBlurHandler = e => {\n        stateRef.current.isFocused = false;\n        if (target.disabled)\n          // For backward compatibility, dispatch a (fake) React synthetic event.\n          dispatchBlur(new $8a9cb279dc87e130$export$905e7fc544a71f36('blur', e));\n        // We no longer need the MutationObserver once the target is blurred.\n        if (stateRef.current.observer) {\n          stateRef.current.observer.disconnect();\n          stateRef.current.observer = null;\n        }\n      };\n      target.addEventListener('focusout', onBlurHandler, {\n        once: true\n      });\n      stateRef.current.observer = new MutationObserver(() => {\n        if (stateRef.current.isFocused && target.disabled) {\n          var _stateRef_current_observer;\n          (_stateRef_current_observer = stateRef.current.observer) === null || _stateRef_current_observer === void 0 ? void 0 : _stateRef_current_observer.disconnect();\n          let relatedTargetEl = target === document.activeElement ? null : document.activeElement;\n          target.dispatchEvent(new FocusEvent('blur', {\n            relatedTarget: relatedTargetEl\n          }));\n          target.dispatchEvent(new FocusEvent('focusout', {\n            bubbles: true,\n            relatedTarget: relatedTargetEl\n          }));\n        }\n      });\n      stateRef.current.observer.observe(target, {\n        attributes: true,\n        attributeFilter: ['disabled']\n      });\n    }\n  }, [dispatchBlur]);\n}\nexport { $8a9cb279dc87e130$export$905e7fc544a71f36 as SyntheticFocusEvent, $8a9cb279dc87e130$export$715c682d09d639cc as useSyntheticBlurEvent };","map":{"version":3,"mappings":"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","names":["$8a9cb279dc87e130$export$905e7fc544a71f36","isDefaultPrevented","nativeEvent","defaultPrevented","preventDefault","stopPropagation","isPropagationStopped","persist","constructor","type","target","currentTarget","relatedTarget","bubbles","cancelable","eventPhase","isTrusted","timeStamp","$8a9cb279dc87e130$export$715c682d09d639cc","onBlur","stateRef","isFocused","observer","state","current","disconnect","dispatchBlur","e","HTMLButtonElement","HTMLInputElement","HTMLTextAreaElement","HTMLSelectElement","onBlurHandler","disabled","addEventListener","once","MutationObserver","_stateRef_current_observer","relatedTargetEl","document","activeElement","dispatchEvent","FocusEvent","observe","attributes","attributeFilter"],"sources":["C:\\Users\\aiwar\\Desktop\\cloth\\myy-app\\node_modules\\@react-aria\\interactions\\dist\\packages\\@react-aria\\interactions\\src\\utils.ts"],"sourcesContent":["/*\n * Copyright 2020 Adobe. All rights reserved.\n * This file is licensed to you under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License. You may obtain a copy\n * of the License at http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software distributed under\n * the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\n * OF ANY KIND, either express or implied. See the License for the specific language\n * governing permissions and limitations under the License.\n */\n\nimport {FocusEvent as ReactFocusEvent, useCallback, useRef} from 'react';\nimport {useEffectEvent, useLayoutEffect} from '@react-aria/utils';\n\nexport class SyntheticFocusEvent<Target = Element> implements ReactFocusEvent<Target> {\n  nativeEvent: FocusEvent;\n  target: EventTarget & Target;\n  currentTarget: EventTarget & Target;\n  relatedTarget: Element;\n  bubbles: boolean;\n  cancelable: boolean;\n  defaultPrevented: boolean;\n  eventPhase: number;\n  isTrusted: boolean;\n  timeStamp: number;\n  type: string;\n\n  constructor(type: string, nativeEvent: FocusEvent) {\n    this.nativeEvent = nativeEvent;\n    this.target = nativeEvent.target as EventTarget & Target;\n    this.currentTarget = nativeEvent.currentTarget as EventTarget & Target;\n    this.relatedTarget = nativeEvent.relatedTarget as Element;\n    this.bubbles = nativeEvent.bubbles;\n    this.cancelable = nativeEvent.cancelable;\n    this.defaultPrevented = nativeEvent.defaultPrevented;\n    this.eventPhase = nativeEvent.eventPhase;\n    this.isTrusted = nativeEvent.isTrusted;\n    this.timeStamp = nativeEvent.timeStamp;\n    this.type = type;\n  }\n\n  isDefaultPrevented(): boolean {\n    return this.nativeEvent.defaultPrevented;\n  }\n\n  preventDefault(): void {\n    this.defaultPrevented = true;\n    this.nativeEvent.preventDefault();\n  }\n\n  stopPropagation(): void {\n    this.nativeEvent.stopPropagation();\n    this.isPropagationStopped = () => true;\n  }\n\n  isPropagationStopped(): boolean {\n    return false;\n  }\n\n  persist() {}\n}\n\nexport function useSyntheticBlurEvent<Target = Element>(onBlur: (e: ReactFocusEvent<Target>) => void) {\n  let stateRef = useRef({\n    isFocused: false,\n    observer: null as MutationObserver | null\n  });\n\n  // Clean up MutationObserver on unmount. See below.\n   \n  useLayoutEffect(() => {\n    const state = stateRef.current;\n    return () => {\n      if (state.observer) {\n        state.observer.disconnect();\n        state.observer = null;\n      }\n    };\n  }, []);\n\n  let dispatchBlur = useEffectEvent((e: SyntheticFocusEvent<Target>) => {\n    onBlur?.(e);\n  });\n\n  // This function is called during a React onFocus event.\n  return useCallback((e: ReactFocusEvent<Target>) => {\n    // React does not fire onBlur when an element is disabled. https://github.com/facebook/react/issues/9142\n    // Most browsers fire a native focusout event in this case, except for Firefox. In that case, we use a\n    // MutationObserver to watch for the disabled attribute, and dispatch these events ourselves.\n    // For browsers that do, focusout fires before the MutationObserver, so onBlur should not fire twice.\n    if (\n      e.target instanceof HTMLButtonElement ||\n      e.target instanceof HTMLInputElement ||\n      e.target instanceof HTMLTextAreaElement ||\n      e.target instanceof HTMLSelectElement\n    ) {\n      stateRef.current.isFocused = true;\n\n      let target = e.target;\n      let onBlurHandler: EventListenerOrEventListenerObject | null = (e) => {\n        stateRef.current.isFocused = false;\n\n        if (target.disabled) {\n          // For backward compatibility, dispatch a (fake) React synthetic event.\n          dispatchBlur(new SyntheticFocusEvent('blur', e as FocusEvent));\n        }\n\n        // We no longer need the MutationObserver once the target is blurred.\n        if (stateRef.current.observer) {\n          stateRef.current.observer.disconnect();\n          stateRef.current.observer = null;\n        }\n      };\n\n      target.addEventListener('focusout', onBlurHandler, {once: true});\n\n      stateRef.current.observer = new MutationObserver(() => {\n        if (stateRef.current.isFocused && target.disabled) {\n          stateRef.current.observer?.disconnect();\n          let relatedTargetEl = target === document.activeElement ? null : document.activeElement;\n          target.dispatchEvent(new FocusEvent('blur', {relatedTarget: relatedTargetEl}));\n          target.dispatchEvent(new FocusEvent('focusout', {bubbles: true, relatedTarget: relatedTargetEl}));\n        }\n      });\n\n      stateRef.current.observer.observe(target, {attributes: true, attributeFilter: ['disabled']});\n    }\n  }, [dispatchBlur]);\n}\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}