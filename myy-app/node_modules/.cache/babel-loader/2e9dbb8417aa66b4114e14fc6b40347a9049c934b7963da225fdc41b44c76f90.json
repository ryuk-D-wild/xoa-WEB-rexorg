{"ast":null,"code":"function memo(getDeps, fn, opts) {\n  let deps = opts.initialDeps ?? [];\n  let result;\n  return () => {\n    var _a, _b, _c, _d;\n    let depTime;\n    if (opts.key && ((_a = opts.debug) == null ? void 0 : _a.call(opts))) depTime = Date.now();\n    const newDeps = getDeps();\n    const depsChanged = newDeps.length !== deps.length || newDeps.some((dep, index) => deps[index] !== dep);\n    if (!depsChanged) {\n      return result;\n    }\n    deps = newDeps;\n    let resultTime;\n    if (opts.key && ((_b = opts.debug) == null ? void 0 : _b.call(opts))) resultTime = Date.now();\n    result = fn(...newDeps);\n    if (opts.key && ((_c = opts.debug) == null ? void 0 : _c.call(opts))) {\n      const depEndTime = Math.round((Date.now() - depTime) * 100) / 100;\n      const resultEndTime = Math.round((Date.now() - resultTime) * 100) / 100;\n      const resultFpsPercentage = resultEndTime / 16;\n      const pad = (str, num) => {\n        str = String(str);\n        while (str.length < num) {\n          str = \" \" + str;\n        }\n        return str;\n      };\n      console.info(`%c⏱ ${pad(resultEndTime, 5)} /${pad(depEndTime, 5)} ms`, `\n            font-size: .6rem;\n            font-weight: bold;\n            color: hsl(${Math.max(0, Math.min(120 - 120 * resultFpsPercentage, 120))}deg 100% 31%);`, opts == null ? void 0 : opts.key);\n    }\n    (_d = opts == null ? void 0 : opts.onChange) == null ? void 0 : _d.call(opts, result);\n    return result;\n  };\n}\nfunction notUndefined(value, msg) {\n  if (value === void 0) {\n    throw new Error(`Unexpected undefined${msg ? `: ${msg}` : \"\"}`);\n  } else {\n    return value;\n  }\n}\nconst approxEqual = (a, b) => Math.abs(a - b) < 1;\nconst debounce = (targetWindow, fn, ms) => {\n  let timeoutId;\n  return function () {\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n    targetWindow.clearTimeout(timeoutId);\n    timeoutId = targetWindow.setTimeout(() => fn.apply(this, args), ms);\n  };\n};\nexport { approxEqual, debounce, memo, notUndefined };","map":{"version":3,"mappings":"AAIgB,cACdA,SACAC,IACAC,MAMA;EACI,WAAOA,KAAKC,eAAe,EAAC;EAC5B;EAEJ,OAAO,MAAe;IAbR;IAcR;IACJ,IAAID,KAAKE,SAAOC,UAAKC,UAAL,gCAAgBC,UAAUC,KAAKC,KAAI;IAEnD,MAAMC,UAAUV,SAAQ;IAExB,MAAMW,cACJD,QAAQE,WAAWC,KAAKD,UACxBF,QAAQI,KAAK,CAACC,KAAUC,UAAkBH,KAAKG,KAAK,MAAMD,GAAG;IAE/D,IAAI,CAACJ,aAAa;MACT;IAAA;IAGFE;IAEH;IACJ,IAAIX,KAAKE,SAAOa,UAAKX,UAAL,gCAAgBY,aAAaV,KAAKC,KAAI;IAE7CU,YAAG,GAAGT,OAAO;IAEtB,IAAIR,KAAKE,SAAOgB,UAAKd,UAAL,gCAAgB;MACxB,mBAAae,KAAKC,OAAOd,KAAKC,QAAQF,WAAY,GAAG,IAAI;MACzD,sBAAgBc,KAAKC,OAAOd,KAAKC,QAAQS,cAAe,GAAG,IAAI;MACrE,MAAMK,sBAAsBC,gBAAgB;MAEtC,YAAM,CAACC,KAAsBC,QAAgB;QACjDD,MAAME,OAAOF,GAAG;QACT,WAAIb,SAASc,KAAK;UACvBD,MAAM,MAAMA;QAAA;QAEP;MACT;MAEQG,aACN,OAAOC,IAAIL,eAAe,CAAC,CAAC,KAAKK,IAAIC,YAAY,CAAC,CAAC,OACnD;AAAA;AAAA;AAAA,yBAGiBT,KAAKU,IAChB,GACAV,KAAKW,IAAI,MAAM,MAAMT,qBAAqB,GAAG,EAC9C,kBACLrB,6BAAME,IACR;IAAA;IAGF,mCAAM6B,aAAN,8BAAiBd;IAEV;EACT;AACF;AAEgB,sBAAgBe,OAAsBC,KAAiB;EACrE,IAAID,UAAU,QAAW;IACjB,UAAIE,MAAM,uBAAuBD,MAAM,KAAKA,GAAG,KAAK,EAAE,EAAE;EAAA,OACzD;IACE;EAAA;AAEX;AAEa,oBAAc,CAACE,GAAWC,MAAcjB,KAAKkB,IAAIF,IAAIC,CAAC,IAAI;AAEhE,MAAME,WAAW,CACtBC,cACAxC,IACAyC,OACG;EACC;EACJ,OAAO,YAA0C;IAAA,kCAAlBC;MAAAA;IAAA;IAC7BF,aAAaG,aAAaC,SAAS;IACvBA,yBAAaC,WAAW,MAAM7C,GAAG8C,MAAM,MAAMJ,IAAI,GAAGD,EAAE;EACpE;AACF","names":["getDeps","fn","opts","initialDeps","key","_a","debug","depTime","Date","now","newDeps","depsChanged","length","deps","some","dep","index","_b","resultTime","result","_c","Math","round","resultFpsPercentage","resultEndTime","str","num","String","console","pad","depEndTime","max","min","onChange","value","msg","Error","a","b","abs","debounce","targetWindow","ms","args","clearTimeout","timeoutId","setTimeout","apply"],"sources":["C:\\Users\\aiwar\\Desktop\\cloth\\myy-app\\node_modules\\@tanstack\\virtual-core\\src\\utils.ts"],"sourcesContent":["export type NoInfer<A extends any> = [A][A extends any ? 0 : never]\n\nexport type PartialKeys<T, K extends keyof T> = Omit<T, K> & Partial<Pick<T, K>>\n\nexport function memo<TDeps extends ReadonlyArray<any>, TResult>(\n  getDeps: () => [...TDeps],\n  fn: (...args: NoInfer<[...TDeps]>) => TResult,\n  opts: {\n    key: false | string\n    debug?: () => boolean\n    onChange?: (result: TResult) => void\n    initialDeps?: TDeps\n  },\n) {\n  let deps = opts.initialDeps ?? []\n  let result: TResult | undefined\n\n  return (): TResult => {\n    let depTime: number\n    if (opts.key && opts.debug?.()) depTime = Date.now()\n\n    const newDeps = getDeps()\n\n    const depsChanged =\n      newDeps.length !== deps.length ||\n      newDeps.some((dep: any, index: number) => deps[index] !== dep)\n\n    if (!depsChanged) {\n      return result!\n    }\n\n    deps = newDeps\n\n    let resultTime: number\n    if (opts.key && opts.debug?.()) resultTime = Date.now()\n\n    result = fn(...newDeps)\n\n    if (opts.key && opts.debug?.()) {\n      const depEndTime = Math.round((Date.now() - depTime!) * 100) / 100\n      const resultEndTime = Math.round((Date.now() - resultTime!) * 100) / 100\n      const resultFpsPercentage = resultEndTime / 16\n\n      const pad = (str: number | string, num: number) => {\n        str = String(str)\n        while (str.length < num) {\n          str = ' ' + str\n        }\n        return str\n      }\n\n      console.info(\n        `%c⏱ ${pad(resultEndTime, 5)} /${pad(depEndTime, 5)} ms`,\n        `\n            font-size: .6rem;\n            font-weight: bold;\n            color: hsl(${Math.max(\n              0,\n              Math.min(120 - 120 * resultFpsPercentage, 120),\n            )}deg 100% 31%);`,\n        opts?.key,\n      )\n    }\n\n    opts?.onChange?.(result)\n\n    return result\n  }\n}\n\nexport function notUndefined<T>(value: T | undefined, msg?: string): T {\n  if (value === undefined) {\n    throw new Error(`Unexpected undefined${msg ? `: ${msg}` : ''}`)\n  } else {\n    return value\n  }\n}\n\nexport const approxEqual = (a: number, b: number) => Math.abs(a - b) < 1\n\nexport const debounce = (\n  targetWindow: Window & typeof globalThis,\n  fn: Function,\n  ms: number,\n) => {\n  let timeoutId: number\n  return function (this: any, ...args: Array<any>) {\n    targetWindow.clearTimeout(timeoutId)\n    timeoutId = targetWindow.setTimeout(() => fn.apply(this, args), ms)\n  }\n}\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}