{"ast":null,"code":"import { useLayoutEffect as $f0a04ccd8dbdd83b$export$e5c5a5f917a5871c } from \"./useLayoutEffect.mjs\";\nimport { useValueEffect as $1dbecbe27a04f9af$export$14d238f342723f25 } from \"./useValueEffect.mjs\";\nimport { useState as $eKkEp$useState, useRef as $eKkEp$useRef, useCallback as $eKkEp$useCallback, useEffect as $eKkEp$useEffect } from \"react\";\nimport { useSSRSafeId as $eKkEp$useSSRSafeId } from \"@react-aria/ssr\";\n\n/*\n * Copyright 2020 Adobe. All rights reserved.\n * This file is licensed to you under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License. You may obtain a copy\n * of the License at http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software distributed under\n * the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\n * OF ANY KIND, either express or implied. See the License for the specific language\n * governing permissions and limitations under the License.\n */\n\n// copied from SSRProvider.tsx to reduce exports, if needed again, consider sharing\nlet $bdb11010cef70236$var$canUseDOM = Boolean(typeof window !== 'undefined' && window.document && window.document.createElement);\nlet $bdb11010cef70236$var$idsUpdaterMap = new Map();\nfunction $bdb11010cef70236$export$f680877a34711e37(defaultId) {\n  let [value, setValue] = (0, $eKkEp$useState)(defaultId);\n  let nextId = (0, $eKkEp$useRef)(null);\n  let res = (0, $eKkEp$useSSRSafeId)(value);\n  let updateValue = (0, $eKkEp$useCallback)(val => {\n    nextId.current = val;\n  }, []);\n  if ($bdb11010cef70236$var$canUseDOM) {\n    // TS not smart enough to know that `has` means the value exists\n    if ($bdb11010cef70236$var$idsUpdaterMap.has(res) && !$bdb11010cef70236$var$idsUpdaterMap.get(res).includes(updateValue)) $bdb11010cef70236$var$idsUpdaterMap.set(res, [...$bdb11010cef70236$var$idsUpdaterMap.get(res), updateValue]);else $bdb11010cef70236$var$idsUpdaterMap.set(res, [updateValue]);\n  }\n  (0, $f0a04ccd8dbdd83b$export$e5c5a5f917a5871c)(() => {\n    let r = res;\n    return () => {\n      $bdb11010cef70236$var$idsUpdaterMap.delete(r);\n    };\n  }, [res]);\n  // This cannot cause an infinite loop because the ref is updated first.\n  // eslint-disable-next-line\n  (0, $eKkEp$useEffect)(() => {\n    let newId = nextId.current;\n    if (newId) {\n      nextId.current = null;\n      setValue(newId);\n    }\n  });\n  return res;\n}\nfunction $bdb11010cef70236$export$cd8c9cb68f842629(idA, idB) {\n  if (idA === idB) return idA;\n  let setIdsA = $bdb11010cef70236$var$idsUpdaterMap.get(idA);\n  if (setIdsA) {\n    setIdsA.forEach(fn => fn(idB));\n    return idB;\n  }\n  let setIdsB = $bdb11010cef70236$var$idsUpdaterMap.get(idB);\n  if (setIdsB) {\n    setIdsB.forEach(fn => fn(idA));\n    return idA;\n  }\n  return idB;\n}\nfunction $bdb11010cef70236$export$b4cc09c592e8fdb8() {\n  let depArray = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : [];\n  let id = $bdb11010cef70236$export$f680877a34711e37();\n  let [resolvedId, setResolvedId] = (0, $1dbecbe27a04f9af$export$14d238f342723f25)(id);\n  let updateId = (0, $eKkEp$useCallback)(() => {\n    setResolvedId(function* () {\n      yield id;\n      yield document.getElementById(id) ? id : undefined;\n    });\n  }, [id, setResolvedId]);\n  (0, $f0a04ccd8dbdd83b$export$e5c5a5f917a5871c)(updateId, [id, updateId, ...depArray]);\n  return resolvedId;\n}\nexport { $bdb11010cef70236$export$f680877a34711e37 as useId, $bdb11010cef70236$export$cd8c9cb68f842629 as mergeIds, $bdb11010cef70236$export$b4cc09c592e8fdb8 as useSlotId };","map":{"version":3,"mappings":";;;;;AAAA;;;;;;;;;;;;AAiBA;AACA,IAAIA,kCAAYC,QACd,OAAOC,WAAW,eAClBA,OAAOC,QAAQ,IACfD,OAAOC,QAAQ,CAACC,aAAa;AAG/B,IAAIC,sCAAyD,IAAIC;AAM1D,SAASC,0CAAMC,SAAkB;EACtC,IAAI,CAACC,OAAOC,SAAS,GAAG,mBAAO,EAAEF;EACjC,IAAIG,SAAS,iBAAK,EAAE;EAEpB,IAAIC,MAAM,uBAAW,EAAEH;EAEvB,IAAII,cAAc,sBAAU,EAAGC;IAC7BH,OAAOI,OAAO,GAAGD;EACnB,GAAG,EAAE;EAEL,IAAId;IACF;IACA,IAAIK,oCAAcW,GAAG,CAACJ,QAAQ,CAACP,oCAAcY,GAAG,CAACL,KAAMM,QAAQ,CAACL,cAC9DR,oCAAcc,GAAG,CAACP,KAAK,IAAIP,oCAAcY,GAAG,CAACL,MAAOC,YAAY,OAEhER,oCAAcc,GAAG,CAACP,KAAK,CAACC,YAAY;;EAIxC,6CAAc,EAAE;IACd,IAAIO,IAAIR;IACR,OAAO;MACLP,oCAAcgB,MAAM,CAACD;IACvB;EACF,GAAG,CAACR,IAAI;EAER;EACA;EACA,oBAAQ,EAAE;IACR,IAAIU,QAAQX,OAAOI,OAAO;IAC1B,IAAIO,OAAO;MACTX,OAAOI,OAAO,GAAG;MACjBL,SAASY;IACX;EACF;EAEA,OAAOV;AACT;AAMO,SAASW,0CAASC,GAAW,EAAEC,GAAW;EAC/C,IAAID,QAAQC,KACV,OAAOD;EAGT,IAAIE,UAAUrB,oCAAcY,GAAG,CAACO;EAChC,IAAIE,SAAS;IACXA,QAAQC,OAAO,CAACC,MAAMA,GAAGH;IACzB,OAAOA;EACT;EAEA,IAAII,UAAUxB,oCAAcY,GAAG,CAACQ;EAChC,IAAII,SAAS;IACXA,QAAQF,OAAO,CAACC,MAAMA,GAAGJ;IACzB,OAAOA;EACT;EAEA,OAAOC;AACT;AAOO,SAASK,4CAA2C;EAAA,IAAjCC,+EAA+B,EAAE;EACzD,IAAIC,KAAKzB;EACT,IAAI,CAAC0B,YAAYC,cAAc,GAAG,6CAAa,EAAEF;EACjD,IAAIG,WAAW,sBAAU,EAAE;IACzBD,cAAc;MACZ,MAAMF;MAEN,MAAM7B,SAASiC,cAAc,CAACJ,MAAMA,KAAKK;IAC3C;EACF,GAAG,CAACL,IAAIE,cAAc;EAEtB,6CAAc,EAAEC,UAAU,CAACH,IAAIG,aAAaJ,SAAS;EAErD,OAAOE;AACT","names":["$bdb11010cef70236$var$canUseDOM","Boolean","window","document","createElement","$bdb11010cef70236$var$idsUpdaterMap","Map","$bdb11010cef70236$export$f680877a34711e37","defaultId","value","setValue","nextId","res","updateValue","val","current","has","get","includes","set","r","delete","newId","$bdb11010cef70236$export$cd8c9cb68f842629","idA","idB","setIdsA","forEach","fn","setIdsB","$bdb11010cef70236$export$b4cc09c592e8fdb8","depArray","id","resolvedId","setResolvedId","updateId","getElementById","undefined"],"sources":["C:\\Users\\aiwar\\Desktop\\cloth\\myy-app\\node_modules\\@react-aria\\utils\\dist\\packages\\@react-aria\\utils\\src\\useId.ts"],"sourcesContent":["/*\n * Copyright 2020 Adobe. All rights reserved.\n * This file is licensed to you under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License. You may obtain a copy\n * of the License at http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software distributed under\n * the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\n * OF ANY KIND, either express or implied. See the License for the specific language\n * governing permissions and limitations under the License.\n */\n\nimport {useCallback, useEffect, useRef, useState} from 'react';\nimport {useLayoutEffect} from './useLayoutEffect';\nimport {useSSRSafeId} from '@react-aria/ssr';\nimport {useValueEffect} from './';\n\n// copied from SSRProvider.tsx to reduce exports, if needed again, consider sharing\nlet canUseDOM = Boolean(\n  typeof window !== 'undefined' &&\n  window.document &&\n  window.document.createElement\n);\n\nlet idsUpdaterMap: Map<string, Array<(v: string) => void>> = new Map();\n\n/**\n * If a default is not provided, generate an id.\n * @param defaultId - Default component id.\n */\nexport function useId(defaultId?: string): string {\n  let [value, setValue] = useState(defaultId);\n  let nextId = useRef(null);\n\n  let res = useSSRSafeId(value);\n\n  let updateValue = useCallback((val) => {\n    nextId.current = val;\n  }, []);\n\n  if (canUseDOM) {\n    // TS not smart enough to know that `has` means the value exists\n    if (idsUpdaterMap.has(res) && !idsUpdaterMap.get(res)!.includes(updateValue)) {\n      idsUpdaterMap.set(res, [...idsUpdaterMap.get(res)!, updateValue]);\n    } else {\n      idsUpdaterMap.set(res, [updateValue]);\n    }\n  }\n\n  useLayoutEffect(() => {\n    let r = res;\n    return () => {\n      idsUpdaterMap.delete(r);\n    };\n  }, [res]);\n\n  // This cannot cause an infinite loop because the ref is updated first.\n  // eslint-disable-next-line\n  useEffect(() => {\n    let newId = nextId.current;\n    if (newId) {\n      nextId.current = null;\n      setValue(newId);\n    }\n  });\n\n  return res;\n}\n\n/**\n * Merges two ids.\n * Different ids will trigger a side-effect and re-render components hooked up with `useId`.\n */\nexport function mergeIds(idA: string, idB: string): string {\n  if (idA === idB) {\n    return idA;\n  }\n\n  let setIdsA = idsUpdaterMap.get(idA);\n  if (setIdsA) {\n    setIdsA.forEach(fn => fn(idB));\n    return idB;\n  }\n\n  let setIdsB = idsUpdaterMap.get(idB);\n  if (setIdsB) {\n    setIdsB.forEach(fn => fn(idA));\n    return idA;\n  }\n\n  return idB;\n}\n\n/**\n * Used to generate an id, and after render, check if that id is rendered so we know\n * if we can use it in places such as labelledby.\n * @param depArray - When to recalculate if the id is in the DOM.\n */\nexport function useSlotId(depArray: ReadonlyArray<any> = []): string {\n  let id = useId();\n  let [resolvedId, setResolvedId] = useValueEffect(id);\n  let updateId = useCallback(() => {\n    setResolvedId(function *() {\n      yield id;\n\n      yield document.getElementById(id) ? id : undefined;\n    });\n  }, [id, setResolvedId]);\n\n  useLayoutEffect(updateId, [id, updateId, ...depArray]);\n\n  return resolvedId;\n}\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}