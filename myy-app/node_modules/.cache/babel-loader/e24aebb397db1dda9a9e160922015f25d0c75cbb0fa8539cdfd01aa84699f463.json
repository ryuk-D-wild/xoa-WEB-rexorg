{"ast":null,"code":"import { useRef as $lPAwt$useRef, useCallback as $lPAwt$useCallback, useEffect as $lPAwt$useEffect } from \"react\";\n\n/*\n * Copyright 2020 Adobe. All rights reserved.\n * This file is licensed to you under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License. You may obtain a copy\n * of the License at http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software distributed under\n * the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\n * OF ANY KIND, either express or implied. See the License for the specific language\n * governing permissions and limitations under the License.\n */\nfunction $03deb23ff14920c4$export$4eaf04e54aa8eed6() {\n  let globalListeners = (0, $lPAwt$useRef)(new Map());\n  let addGlobalListener = (0, $lPAwt$useCallback)((eventTarget, type, listener, options) => {\n    // Make sure we remove the listener after it is called with the `once` option.\n    let fn = (options === null || options === void 0 ? void 0 : options.once) ? function () {\n      globalListeners.current.delete(listener);\n      listener(...arguments);\n    } : listener;\n    globalListeners.current.set(listener, {\n      type: type,\n      eventTarget: eventTarget,\n      fn: fn,\n      options: options\n    });\n    eventTarget.addEventListener(type, listener, options);\n  }, []);\n  let removeGlobalListener = (0, $lPAwt$useCallback)((eventTarget, type, listener, options) => {\n    var _globalListeners_current_get;\n    let fn = ((_globalListeners_current_get = globalListeners.current.get(listener)) === null || _globalListeners_current_get === void 0 ? void 0 : _globalListeners_current_get.fn) || listener;\n    eventTarget.removeEventListener(type, fn, options);\n    globalListeners.current.delete(listener);\n  }, []);\n  let removeAllGlobalListeners = (0, $lPAwt$useCallback)(() => {\n    globalListeners.current.forEach((value, key) => {\n      removeGlobalListener(value.eventTarget, value.type, key, value.options);\n    });\n  }, [removeGlobalListener]);\n  (0, $lPAwt$useEffect)(() => {\n    return removeAllGlobalListeners;\n  }, [removeAllGlobalListeners]);\n  return {\n    addGlobalListener: addGlobalListener,\n    removeGlobalListener: removeGlobalListener,\n    removeAllGlobalListeners: removeAllGlobalListeners\n  };\n}\nexport { $03deb23ff14920c4$export$4eaf04e54aa8eed6 as useGlobalListeners };","map":{"version":3,"mappings":";;AAAA;;;;;;;;;;;AAsBO,SAASA;EACd,IAAIC,kBAAkB,iBAAK,EAAE,IAAIC;EACjC,IAAIC,oBAAoB,sBAAU,EAAE,CAACC,aAAaC,MAAMC,UAAUC;IAChE;IACA,IAAIC,KAAK,2DAASC,IAAI,IAAG,YAAI;MAC3BR,gBAAgBS,OAAO,CAACC,MAAM,CAACL;MAC/BA,qBAAY;IACd,IAAIA;IACJL,gBAAgBS,OAAO,CAACE,GAAG,CAACN,UAAU;YAACD;mBAAMD;UAAaI;eAAID;IAAO;IACrEH,YAAYS,gBAAgB,CAACR,MAAMC,UAAUC;EAC/C,GAAG,EAAE;EACL,IAAIO,uBAAuB,sBAAU,EAAE,CAACV,aAAaC,MAAMC,UAAUC;QAC1DQ;IAAT,IAAIP,KAAK,iDAAgBE,OAAO,CAACM,GAAG,CAACV,uBAA5BS,gFAAuCP,EAAE,KAAIF;IACtDF,YAAYa,mBAAmB,CAACZ,MAAMG,IAAID;IAC1CN,gBAAgBS,OAAO,CAACC,MAAM,CAACL;EACjC,GAAG,EAAE;EACL,IAAIY,2BAA2B,sBAAU,EAAE;IACzCjB,gBAAgBS,OAAO,CAACS,OAAO,CAAC,CAACC,OAAOC;MACtCP,qBAAqBM,MAAMhB,WAAW,EAAEgB,MAAMf,IAAI,EAAEgB,KAAKD,MAAMb,OAAO;IACxE;EACF,GAAG,CAACO,qBAAqB;EAGzB,oBAAQ,EAAE;IACR,OAAOI;EACT,GAAG,CAACA,yBAAyB;EAE7B,OAAO;uBAACf;0BAAmBW;8BAAsBI;EAAwB;AAC3E","names":["$03deb23ff14920c4$export$4eaf04e54aa8eed6","globalListeners","Map","addGlobalListener","eventTarget","type","listener","options","fn","once","current","delete","set","addEventListener","removeGlobalListener","_globalListeners_current_get","get","removeEventListener","removeAllGlobalListeners","forEach","value","key"],"sources":["C:\\Users\\aiwar\\Desktop\\cloth\\myy-app\\node_modules\\@react-aria\\utils\\dist\\packages\\@react-aria\\utils\\src\\useGlobalListeners.ts"],"sourcesContent":["/*\n * Copyright 2020 Adobe. All rights reserved.\n * This file is licensed to you under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License. You may obtain a copy\n * of the License at http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software distributed under\n * the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\n * OF ANY KIND, either express or implied. See the License for the specific language\n * governing permissions and limitations under the License.\n */\n\nimport {useCallback, useEffect, useRef} from 'react';\n\ninterface GlobalListeners {\n  addGlobalListener<K extends keyof DocumentEventMap>(el: EventTarget, type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void,\n  addGlobalListener(el: EventTarget, type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void,\n  removeGlobalListener<K extends keyof DocumentEventMap>(el: EventTarget, type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | EventListenerOptions): void,\n  removeGlobalListener(el: EventTarget, type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void,\n  removeAllGlobalListeners(): void\n}\n\nexport function useGlobalListeners(): GlobalListeners {\n  let globalListeners = useRef(new Map());\n  let addGlobalListener = useCallback((eventTarget, type, listener, options) => {\n    // Make sure we remove the listener after it is called with the `once` option.\n    let fn = options?.once ? (...args) => {\n      globalListeners.current.delete(listener);\n      listener(...args);\n    } : listener;\n    globalListeners.current.set(listener, {type, eventTarget, fn, options});\n    eventTarget.addEventListener(type, listener, options);\n  }, []);\n  let removeGlobalListener = useCallback((eventTarget, type, listener, options) => {\n    let fn = globalListeners.current.get(listener)?.fn || listener;\n    eventTarget.removeEventListener(type, fn, options);\n    globalListeners.current.delete(listener);\n  }, []);\n  let removeAllGlobalListeners = useCallback(() => {\n    globalListeners.current.forEach((value, key) => {\n      removeGlobalListener(value.eventTarget, value.type, key, value.options);\n    });\n  }, [removeGlobalListener]);\n\n   \n  useEffect(() => {\n    return removeAllGlobalListeners;\n  }, [removeAllGlobalListeners]);\n\n  return {addGlobalListener, removeGlobalListener, removeAllGlobalListeners};\n}\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}